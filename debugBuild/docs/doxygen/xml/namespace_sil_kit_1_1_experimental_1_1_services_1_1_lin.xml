<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin" kind="namespace" language="C++">
    <compoundname>SilKit::Experimental::Services::Lin</compoundname>
    <innerclass refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_controller_dynamic_config" prot="public">SilKit::Experimental::Services::Lin::LinControllerDynamicConfig</innerclass>
    <innerclass refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_frame_header_event" prot="public">SilKit::Experimental::Services::Lin::LinFrameHeaderEvent</innerclass>
    <innerclass refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_slave_configuration" prot="public">SilKit::Experimental::Services::Lin::LinSlaveConfiguration</innerclass>
    <innerclass refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_slave_configuration_event" prot="public">SilKit::Experimental::Services::Lin::LinSlaveConfigurationEvent</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a1176a3839c62930b8a9bd0ab9432df27" prot="public" static="no">
        <type><ref refid="class_sil_kit_1_1_services_1_1_lin_1_1_i_lin_controller_1af468e0b5b22f65d9c5b966b37d7b8fb8" kindref="member">ILinController::CallbackT</ref>&lt; <ref refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_slave_configuration_event" kindref="compound">LinSlaveConfigurationEvent</ref> &gt;</type>
        <definition>using SilKit::Experimental::Services::Lin::LinSlaveConfigurationHandler = typedef ILinController::CallbackT&lt;LinSlaveConfigurationEvent&gt;</definition>
        <argsstring></argsstring>
        <name>LinSlaveConfigurationHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that a LIN Slave configuration has been received.</para><para>Triggered when a remote LIN Slave calls LinController::Init() or LinController::SetFrameResponse(). Cf., <ref refid="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a5321829ea151f811d9a4049a2cecfdc8" kindref="member">AddLinSlaveConfigurationHandler</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinDatatypesExtensions.hpp" line="50" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinDatatypesExtensions.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a4539be8ad0104b40e33dfd1f1987be33" prot="public" static="no">
        <type><ref refid="class_sil_kit_1_1_services_1_1_lin_1_1_i_lin_controller_1af468e0b5b22f65d9c5b966b37d7b8fb8" kindref="member">ILinController::CallbackT</ref>&lt; <ref refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_frame_header_event" kindref="compound">LinFrameHeaderEvent</ref> &gt;</type>
        <definition>using SilKit::Experimental::Services::Lin::LinFrameHeaderHandler = typedef ILinController::CallbackT&lt;LinFrameHeaderEvent&gt;</definition>
        <argsstring></argsstring>
        <name>LinFrameHeaderHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that a frame header has been received. Cf., <ref refid="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1ac7458388faae2444554fe7b51c405cb0" kindref="member">AddFrameHeaderHandler(ILinController*,LinFrameHeaderHandler)</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinDatatypesExtensions.hpp" line="81" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinDatatypesExtensions.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a5321829ea151f811d9a4049a2cecfdc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto SilKit::Experimental::Services::Lin::AddLinSlaveConfigurationHandler</definition>
        <argsstring>(SilKit::Services::Lin::ILinController *linController, SilKit::Experimental::Services::Lin::LinSlaveConfigurationHandler handler) -&gt; SilKit::Util::HandlerId</argsstring>
        <name>AddLinSlaveConfigurationHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_lin_1_1_i_lin_controller" kindref="compound">SilKit::Services::Lin::ILinController</ref> *</type>
          <declname>linController</declname>
        </param>
        <param>
          <type><ref refid="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a1176a3839c62930b8a9bd0ab9432df27" kindref="member">SilKit::Experimental::Services::Lin::LinSlaveConfigurationHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Add a LinSlaveConfigurationHandler on a given controller that triggers when a remote LIN slave is changes its configuration. </para>        </briefdescription>
        <detaileddescription>
<para>This callback is mainly for diagnostic purposes and is NOT needed for regular LIN controller operation. It can be used to call <ref refid="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a0bd7bfb472393ba06073d09f8977dcdd" kindref="member">GetSlaveConfiguration</ref> to keep track of LIN Ids, where a response of a LIN Slave is to be expected.</para><para>Requires <ref refid="namespace_sil_kit_1_1_services_1_1_lin_1adf4bafb1dcc0c630048f7014c4ca3ba5af03bde11d261f185cbacfa32c1c6538c" kindref="member">Services::Lin::LinControllerMode::Master</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linController</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to add the handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback that is triggered upon a configuration update.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> that can be used to remove the callback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinControllerExtensions.hpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1ae7fdab85dab4c8bf4f7a34814b2e61d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SilKit::Experimental::Services::Lin::RemoveLinSlaveConfigurationHandler</definition>
        <argsstring>(SilKit::Services::Lin::ILinController *linController, SilKit::Util::HandlerId handlerId)</argsstring>
        <name>RemoveLinSlaveConfigurationHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_lin_1_1_i_lin_controller" kindref="compound">SilKit::Services::Lin::ILinController</ref> *</type>
          <declname>linController</declname>
        </param>
        <param>
          <type><ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref></type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a LinSlaveConfigurationHandler by HandlerId on a given controller. </para>        </briefdescription>
        <detaileddescription>
<para>Requires <ref refid="namespace_sil_kit_1_1_services_1_1_lin_1adf4bafb1dcc0c630048f7014c4ca3ba5af03bde11d261f185cbacfa32c1c6538c" kindref="member">Services::Lin::LinControllerMode::Master</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linController</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to remove the handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinControllerExtensions.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a0bd7bfb472393ba06073d09f8977dcdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto SilKit::Experimental::Services::Lin::GetSlaveConfiguration</definition>
        <argsstring>(SilKit::Services::Lin::ILinController *linController) -&gt; SilKit::Experimental::Services::Lin::LinSlaveConfiguration</argsstring>
        <name>GetSlaveConfiguration</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_lin_1_1_i_lin_controller" kindref="compound">SilKit::Services::Lin::ILinController</ref> *</type>
          <declname>linController</declname>
        </param>
        <briefdescription>
<para>Get the aggregated response configuration of all LIN slaves in the network. </para>        </briefdescription>
        <detaileddescription>
<para>Requires <ref refid="namespace_sil_kit_1_1_services_1_1_lin_1adf4bafb1dcc0c630048f7014c4ca3ba5af03bde11d261f185cbacfa32c1c6538c" kindref="member">Services::Lin::LinControllerMode::Master</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linController</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller (master) to providing the view.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A struct containing all LinIds on which LIN Slaves have configured <ref refid="namespace_sil_kit_1_1_services_1_1_lin_1a89a2e567ad48c02fa548b6d11841e1eca27aa3ae03156b0781515a5dde6c77a05" kindref="member">Services::Lin::LinFrameResponseMode::TxUnconditional</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinControllerExtensions.hpp" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a6c76e854f83278d4fb74d893fbb141f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SilKit::Experimental::Services::Lin::InitDynamic</definition>
        <argsstring>(SilKit::Services::Lin::ILinController *linController, const SilKit::Experimental::Services::Lin::LinControllerDynamicConfig &amp;dynamicConfig)</argsstring>
        <name>InitDynamic</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_lin_1_1_i_lin_controller" kindref="compound">SilKit::Services::Lin::ILinController</ref> *</type>
          <declname>linController</declname>
        </param>
        <param>
          <type>const <ref refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_controller_dynamic_config" kindref="compound">SilKit::Experimental::Services::Lin::LinControllerDynamicConfig</ref> &amp;</type>
          <declname>dynamicConfig</declname>
        </param>
        <briefdescription>
<para>Initialize the LIN controller with the given <ref refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_controller_dynamic_config" kindref="compound">LinControllerDynamicConfig</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>All controllers must be initialized exactly once to take part in LIN communication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linController</parametername>
</parameternamelist>
<parameterdescription>
<para>The controller to act upon </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dynamicConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>The controller configuration contains:<itemizedlist>
<listitem><para>controllerMode, either sets LIN master or LIN slave mode.</para></listitem><listitem><para>baudRate, determine transmission speeds (only used for detailed simulation).</para></listitem><listitem><para>simulationMode, can be used to enable LinSimulationMode::DynamicResponse</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_sil_kit_1_1_state_error" kindref="compound">SilKit::StateError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the LIN Controller is configured with LinControllerMode::Inactive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="class_sil_kit_1_1_state_error" kindref="compound">SilKit::StateError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if Init() is called a second time on this LIN Controller. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinControllerExtensions.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1ac7458388faae2444554fe7b51c405cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto SilKit::Experimental::Services::Lin::AddFrameHeaderHandler</definition>
        <argsstring>(SilKit::Services::Lin::ILinController *linController, SilKit::Experimental::Services::Lin::LinFrameHeaderHandler handler) -&gt; SilKit::Services::HandlerId</argsstring>
        <name>AddFrameHeaderHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_lin_1_1_i_lin_controller" kindref="compound">SilKit::Services::Lin::ILinController</ref> *</type>
          <declname>linController</declname>
        </param>
        <param>
          <type><ref refid="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a4539be8ad0104b40e33dfd1f1987be33" kindref="member">SilKit::Experimental::Services::Lin::LinFrameHeaderHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>The FrameHeaderHandler is called whenever a LIN frame header is received. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> that can be used to remove the callback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinControllerExtensions.hpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a3f39b3f368dfd675c1e5b08fd4397408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SilKit::Experimental::Services::Lin::RemoveFrameHeaderHandler</definition>
        <argsstring>(SilKit::Services::Lin::ILinController *linController, SilKit::Services::HandlerId handlerId)</argsstring>
        <name>RemoveFrameHeaderHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_lin_1_1_i_lin_controller" kindref="compound">SilKit::Services::Lin::ILinController</ref> *</type>
          <declname>linController</declname>
        </param>
        <param>
          <type>SilKit::Services::HandlerId</type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a FrameHeaderHandler by <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linController</parametername>
</parameternamelist>
<parameterdescription>
<para>The controller to act upon </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinControllerExtensions.hpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a56f62510d3ec7f58f016c11dbecd6070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SilKit::Experimental::Services::Lin::SendDynamicResponse</definition>
        <argsstring>(SilKit::Services::Lin::ILinController *linController, const SilKit::Services::Lin::LinFrame &amp;linFrame)</argsstring>
        <name>SendDynamicResponse</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_lin_1_1_i_lin_controller" kindref="compound">SilKit::Services::Lin::ILinController</ref> *</type>
          <declname>linController</declname>
        </param>
        <param>
          <type>const <ref refid="struct_sil_kit_1_1_services_1_1_lin_1_1_lin_frame" kindref="compound">SilKit::Services::Lin::LinFrame</ref> &amp;</type>
          <declname>linFrame</declname>
        </param>
        <briefdescription>
<para>Send a response for the previously received LIN header, but only when the controller was initialized using <ref refid="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a6c76e854f83278d4fb74d893fbb141f6" kindref="member">InitDynamic</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_sil_kit_1_1_state_error" kindref="compound">SilKit::StateError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the LIN Controller is not initialized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="class_sil_kit_1_1_state_error" kindref="compound">SilKit::StateError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the LIN controller was not initialized using <ref refid="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a6c76e854f83278d4fb74d893fbb141f6" kindref="member">InitDynamic</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="class_sil_kit_1_1_state_error" kindref="compound">SilKit::StateError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if no prior <ref refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_frame_header_event" kindref="compound">LinFrameHeaderEvent</ref> was received before the call. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinControllerExtensions.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a27edd3da9ea1fdaa5a8d30535c898fef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SilKit::Experimental::Services::Lin::to_string</definition>
        <argsstring>(const Experimental::Services::Lin::LinSlaveConfiguration &amp;linSlaveConfiguration)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_slave_configuration" kindref="compound">Experimental::Services::Lin::LinSlaveConfiguration</ref> &amp;</type>
          <declname>linSlaveConfiguration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/string_utils.hpp" line="36" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/string_utils.hpp" bodystart="44" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sil_kit_1_1_experimental_1_1_services_1_1_lin_1a468725d6e2b7fa8ac27b22602479f0ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; SilKit::Experimental::Services::Lin::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Experimental::Services::Lin::LinSlaveConfiguration &amp;linSlaveConfiguration)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_sil_kit_1_1_experimental_1_1_services_1_1_lin_1_1_lin_slave_configuration" kindref="compound">Experimental::Services::Lin::LinSlaveConfiguration</ref> &amp;</type>
          <declname>linSlaveConfiguration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/string_utils.hpp" line="38" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/string_utils.hpp" bodystart="51" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinControllerExtensions.hpp" line="34" column="1"/>
  </compounddef>
</doxygen>
