<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_pub_sub_spec_8hpp" kind="file" language="C++">
    <compoundname>PubSubSpec.hpp</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes refid="datatypes_8hpp" local="yes">silkit/services/datatypes.hpp</includes>
    <includes refid="exception_8hpp" local="yes">silkit/participant/exception.hpp</includes>
    <includedby refid="_i_participant_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/participant/IParticipant.hpp</includedby>
    <includedby refid="services_2pubsub_2all_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/all.hpp</includedby>
    <incdepgraph>
      <node id="1598">
        <label>cstdint</label>
      </node>
      <node id="1597">
        <label>silkit/services/datatypes.hpp</label>
        <link refid="datatypes_8hpp"/>
        <childnode refid="1598" relation="include">
        </childnode>
        <childnode refid="1599" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
      </node>
      <node id="1601">
        <label>silkit/participant/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1599" relation="include">
        </childnode>
      </node>
      <node id="1602">
        <label>stdexcept</label>
      </node>
      <node id="1599">
        <label>string</label>
      </node>
      <node id="1594">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/PubSubSpec.hpp</label>
        <link refid="_pub_sub_spec_8hpp"/>
        <childnode refid="1595" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
        <childnode refid="1597" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
      </node>
      <node id="1595">
        <label>vector</label>
      </node>
      <node id="1600">
        <label>silkit/util/HandlerId.hpp</label>
        <link refid="_handler_id_8hpp"/>
        <childnode refid="1598" relation="include">
        </childnode>
      </node>
      <node id="1596">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1606">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/SilKit.hpp</label>
        <link refid="_sil_kit_8hpp"/>
      </node>
      <node id="1604">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/participant/IParticipant.hpp</label>
        <link refid="_i_participant_8hpp"/>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1606" relation="include">
        </childnode>
      </node>
      <node id="1603">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/PubSubSpec.hpp</label>
        <link refid="_pub_sub_spec_8hpp"/>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1607" relation="include">
        </childnode>
      </node>
      <node id="1607">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/all.hpp</label>
        <link refid="services_2pubsub_2all_8hpp"/>
        <childnode refid="1608" relation="include">
        </childnode>
      </node>
      <node id="1608">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/all.hpp</label>
        <link refid="services_2all_8hpp"/>
      </node>
      <node id="1605">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/participant/ParticipantExtensions.hpp</label>
        <link refid="_participant_extensions_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec" prot="public">SilKit::Services::PubSub::PubSubSpec</innerclass>
    <innernamespace refid="namespace_sil_kit">SilKit</innernamespace>
    <innernamespace refid="namespace_sil_kit_1_1_services">SilKit::Services</innernamespace>
    <innernamespace refid="namespace_sil_kit_1_1_services_1_1_pub_sub">SilKit::Services::PubSub</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2022<sp/>Vector<sp/>Informatik<sp/>GmbH</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="4"><highlight class="comment">a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="5"><highlight class="comment">&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="6"><highlight class="comment">without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="7"><highlight class="comment">distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment">permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment">the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="12"><highlight class="comment">included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment">NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE</highlight></codeline>
<codeline lineno="18"><highlight class="comment">LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION</highlight></codeline>
<codeline lineno="19"><highlight class="comment">OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="20"><highlight class="comment">WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="datatypes_8hpp" kindref="compound">silkit/services/datatypes.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exception_8hpp" kindref="compound">silkit/participant/exception.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_sil_kit" kindref="compound">SilKit</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Services<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">PubSub<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec" kindref="compound">PubSubSpec</ref></highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_topic{};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_mediaType{};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SilKit::Services::MatchingLabel&gt;<sp/>_labels{};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1af85c0edd978c4e0cd4d18d847272385a" kindref="member">PubSubSpec</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a487cfb2244d6ed96047e1debc9320dbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a487cfb2244d6ed96047e1debc9320dbd" kindref="member">PubSubSpec</ref>(std::string<sp/>topic,<sp/>std::string<sp/>mediaType)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_topic{std::move(topic)}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_mediaType{std::move(mediaType)}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a27ff5f8adf1bd78672e0504c266a2b55" kindref="member">AddLabel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit_1_1_services_1_1_matching_label" kindref="compound">SilKit::Services::MatchingLabel</ref>&amp;<sp/>label);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a27ff5f8adf1bd78672e0504c266a2b55" kindref="member">AddLabel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value,<sp/><ref refid="struct_sil_kit_1_1_services_1_1_matching_label_1adc7e18571703da96831e8093f0d96829" kindref="member">SilKit::Services::MatchingLabel::Kind</ref><sp/>kind);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a8eaf3b30d215875e76110dd7f9ca0186" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a8eaf3b30d215875e76110dd7f9ca0186" kindref="member">Topic</ref>()<sp/>const<sp/>-&gt;<sp/>const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_topic;<sp/>}</highlight></codeline>
<codeline lineno="62" refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1aa7253a4d9f0c26e5b2833cdff1b0bb33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1aa7253a4d9f0c26e5b2833cdff1b0bb33" kindref="member">MediaType</ref>()<sp/>const<sp/>-&gt;<sp/>const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_mediaType;<sp/>}</highlight></codeline>
<codeline lineno="64" refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a025b6d855499858a646b5e5a2dada499" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a025b6d855499858a646b5e5a2dada499" kindref="member">Labels</ref>()<sp/>const<sp/>-&gt;<sp/>const<sp/>std::vector&lt;<ref refid="namespace_sil_kit" kindref="compound">SilKit</ref>::Services::<ref refid="struct_sil_kit_1_1_services_1_1_matching_label" kindref="compound">MatchingLabel</ref>&gt;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_labels;<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a27ff5f8adf1bd78672e0504c266a2b55" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a27ff5f8adf1bd78672e0504c266a2b55" kindref="member">PubSubSpec::AddLabel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit_1_1_services_1_1_matching_label" kindref="compound">SilKit::Services::MatchingLabel</ref>&amp;<sp/>label)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label.<ref refid="struct_sil_kit_1_1_services_1_1_matching_label_1a1ec6b3eb1e89a39bbe278b563d23bec0" kindref="member">kind</ref><sp/>!=<sp/><ref refid="struct_sil_kit_1_1_services_1_1_matching_label_1adc7e18571703da96831e8093f0d96829ae89ab59baea830bd940c300886c50efe" kindref="member">MatchingLabel::Kind::Mandatory</ref><sp/>&amp;&amp;<sp/>label.<ref refid="struct_sil_kit_1_1_services_1_1_matching_label_1a1ec6b3eb1e89a39bbe278b563d23bec0" kindref="member">kind</ref><sp/>!=<sp/><ref refid="struct_sil_kit_1_1_services_1_1_matching_label_1adc7e18571703da96831e8093f0d96829aebb061953c0454b2c8ee7b0ac615ebcd" kindref="member">MatchingLabel::Kind::Optional</ref>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_configuration_error" kindref="compound">ConfigurationError</ref>(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SilKit::Services::MatchingLabel<sp/>must<sp/>specify<sp/>a<sp/>SilKit::Services::MatchingLabel::Kind.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>_labels)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it.key<sp/>==<sp/>label.<ref refid="struct_sil_kit_1_1_services_1_1_matching_label_1abc4d02e4ab95c4a3c9519a29da57932c" kindref="member">key</ref>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>label;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>_labels.push_back(label);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a26d23f9d04ccafa8d5d6a3521ed7af31" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a27ff5f8adf1bd78672e0504c266a2b55" kindref="member">PubSubSpec::AddLabel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value,<sp/><ref refid="struct_sil_kit_1_1_services_1_1_matching_label_1adc7e18571703da96831e8093f0d96829" kindref="member">SilKit::Services::MatchingLabel::Kind</ref><sp/>kind)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sil_kit_1_1_services_1_1_pub_sub_1_1_pub_sub_spec_1a27ff5f8adf1bd78672e0504c266a2b55" kindref="member">AddLabel</ref>({key,<sp/>value,<sp/>kind});</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PubSub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Services</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>SilKit</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/PubSubSpec.hpp"/>
  </compounddef>
</doxygen>
