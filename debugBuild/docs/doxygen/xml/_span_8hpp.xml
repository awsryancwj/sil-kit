<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_span_8hpp" kind="file" language="C++">
    <compoundname>Span.hpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">vector</includes>
    <includes local="no">array</includes>
    <includes local="no">string</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">type_traits</includes>
    <includes refid="_types_8h" local="yes">silkit/capi/Types.h</includes>
    <includes refid="exception_8hpp" local="yes">silkit/participant/exception.hpp</includes>
    <includedby refid="_can_datatypes_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/can/CanDatatypes.hpp</includedby>
    <includedby refid="_ethernet_datatypes_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/ethernet/EthernetDatatypes.hpp</includedby>
    <includedby refid="_flexray_datatypes_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/FlexrayDatatypes.hpp</includedby>
    <includedby refid="_lin_datatypes_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/lin/LinDatatypes.hpp</includedby>
    <includedby refid="_pub_sub_datatypes_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/PubSubDatatypes.hpp</includedby>
    <includedby refid="_i_data_publisher_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/IDataPublisher.hpp</includedby>
    <includedby refid="_rpc_datatypes_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/rpc/RpcDatatypes.hpp</includedby>
    <includedby refid="_i_rpc_client_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/rpc/IRpcClient.hpp</includedby>
    <includedby refid="_i_rpc_server_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/rpc/IRpcServer.hpp</includedby>
    <incdepgraph>
      <node id="1863">
        <label>cstdint</label>
      </node>
      <node id="1860">
        <label>stdint.h</label>
      </node>
      <node id="1864">
        <label>silkit/participant/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="1857" relation="include">
        </childnode>
        <childnode refid="1856" relation="include">
        </childnode>
      </node>
      <node id="1857">
        <label>stdexcept</label>
      </node>
      <node id="1856">
        <label>string</label>
      </node>
      <node id="1861">
        <label>stddef.h</label>
      </node>
      <node id="1862">
        <label>SilKitMacros.h</label>
        <link refid="_sil_kit_macros_8h"/>
        <childnode refid="1863" relation="include">
        </childnode>
      </node>
      <node id="1854">
        <label>vector</label>
      </node>
      <node id="1855">
        <label>array</label>
      </node>
      <node id="1852">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/util/Span.hpp</label>
        <link refid="_span_8hpp"/>
        <childnode refid="1853" relation="include">
        </childnode>
        <childnode refid="1854" relation="include">
        </childnode>
        <childnode refid="1855" relation="include">
        </childnode>
        <childnode refid="1856" relation="include">
        </childnode>
        <childnode refid="1857" relation="include">
        </childnode>
        <childnode refid="1858" relation="include">
        </childnode>
        <childnode refid="1859" relation="include">
        </childnode>
        <childnode refid="1864" relation="include">
        </childnode>
      </node>
      <node id="1858">
        <label>type_traits</label>
      </node>
      <node id="1853">
        <label>algorithm</label>
      </node>
      <node id="1859">
        <label>silkit/capi/Types.h</label>
        <link refid="_types_8h"/>
        <childnode refid="1860" relation="include">
        </childnode>
        <childnode refid="1861" relation="include">
        </childnode>
        <childnode refid="1862" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1872">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/ethernet/all.hpp</label>
        <link refid="services_2ethernet_2all_8hpp"/>
        <childnode refid="1868" relation="include">
        </childnode>
      </node>
      <node id="1895">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/rpc/IRpcClient.hpp</label>
        <link refid="_i_rpc_client_8hpp"/>
        <childnode refid="1896" relation="include">
        </childnode>
      </node>
      <node id="1871">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/ethernet/EthernetDatatypes.hpp</label>
        <link refid="_ethernet_datatypes_8hpp"/>
        <childnode refid="1872" relation="include">
        </childnode>
        <childnode refid="1873" relation="include">
        </childnode>
        <childnode refid="1874" relation="include">
        </childnode>
      </node>
      <node id="1891">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/IDataSubscriber.hpp</label>
        <link refid="_i_data_subscriber_8hpp"/>
        <childnode refid="1890" relation="include">
        </childnode>
      </node>
      <node id="1866">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/can/CanDatatypes.hpp</label>
        <link refid="_can_datatypes_8hpp"/>
        <childnode refid="1867" relation="include">
        </childnode>
        <childnode refid="1869" relation="include">
        </childnode>
        <childnode refid="1870" relation="include">
        </childnode>
      </node>
      <node id="1873">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/ethernet/IEthernetController.hpp</label>
        <link refid="_i_ethernet_controller_8hpp"/>
        <childnode refid="1872" relation="include">
        </childnode>
      </node>
      <node id="1879">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/lin/LinDatatypes.hpp</label>
        <link refid="_lin_datatypes_8hpp"/>
        <childnode refid="1880" relation="include">
        </childnode>
        <childnode refid="1884" relation="include">
        </childnode>
        <childnode refid="1885" relation="include">
        </childnode>
      </node>
      <node id="1893">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/IDataPublisher.hpp</label>
        <link refid="_i_data_publisher_8hpp"/>
        <childnode refid="1890" relation="include">
        </childnode>
      </node>
      <node id="1889">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/SilKit.hpp</label>
        <link refid="_sil_kit_8hpp"/>
      </node>
      <node id="1876">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/all.hpp</label>
        <link refid="services_2flexray_2all_8hpp"/>
        <childnode refid="1868" relation="include">
        </childnode>
      </node>
      <node id="1882">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/string_utils.hpp</label>
        <link refid="experimental_2services_2lin_2string__utils_8hpp"/>
      </node>
      <node id="1897">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/rpc/IRpcServer.hpp</label>
        <link refid="_i_rpc_server_8hpp"/>
        <childnode refid="1896" relation="include">
        </childnode>
      </node>
      <node id="1898">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/rpc/string_utils.hpp</label>
        <link refid="services_2rpc_2string__utils_8hpp"/>
      </node>
      <node id="1887">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/participant/IParticipant.hpp</label>
        <link refid="_i_participant_8hpp"/>
        <childnode refid="1888" relation="include">
        </childnode>
        <childnode refid="1889" relation="include">
        </childnode>
      </node>
      <node id="1869">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/can/ICanController.hpp</label>
        <link refid="_i_can_controller_8hpp"/>
        <childnode refid="1867" relation="include">
        </childnode>
      </node>
      <node id="1878">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/string_utils.hpp</label>
        <link refid="services_2flexray_2string__utils_8hpp"/>
      </node>
      <node id="1880">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/lin/ILinController.hpp</label>
        <link refid="_i_lin_controller_8hpp"/>
        <childnode refid="1881" relation="include">
        </childnode>
        <childnode refid="1883" relation="include">
        </childnode>
        <childnode refid="1884" relation="include">
        </childnode>
      </node>
      <node id="1886">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/PubSubDatatypes.hpp</label>
        <link refid="_pub_sub_datatypes_8hpp"/>
        <childnode refid="1887" relation="include">
        </childnode>
        <childnode refid="1890" relation="include">
        </childnode>
        <childnode refid="1891" relation="include">
        </childnode>
        <childnode refid="1892" relation="include">
        </childnode>
      </node>
      <node id="1894">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/rpc/RpcDatatypes.hpp</label>
        <link refid="_rpc_datatypes_8hpp"/>
        <childnode refid="1887" relation="include">
        </childnode>
        <childnode refid="1895" relation="include">
        </childnode>
        <childnode refid="1897" relation="include">
        </childnode>
        <childnode refid="1896" relation="include">
        </childnode>
        <childnode refid="1898" relation="include">
        </childnode>
      </node>
      <node id="1881">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinControllerExtensions.hpp</label>
        <link refid="_lin_controller_extensions_8hpp"/>
        <childnode refid="1882" relation="include">
        </childnode>
      </node>
      <node id="1896">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/rpc/all.hpp</label>
        <link refid="services_2rpc_2all_8hpp"/>
        <childnode refid="1868" relation="include">
        </childnode>
      </node>
      <node id="1890">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/all.hpp</label>
        <link refid="services_2pubsub_2all_8hpp"/>
        <childnode refid="1868" relation="include">
        </childnode>
      </node>
      <node id="1875">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/FlexrayDatatypes.hpp</label>
        <link refid="_flexray_datatypes_8hpp"/>
        <childnode refid="1876" relation="include">
        </childnode>
        <childnode refid="1877" relation="include">
        </childnode>
        <childnode refid="1878" relation="include">
        </childnode>
      </node>
      <node id="1884">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/lin/all.hpp</label>
        <link refid="services_2lin_2all_8hpp"/>
        <childnode refid="1868" relation="include">
        </childnode>
      </node>
      <node id="1868">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/all.hpp</label>
        <link refid="services_2all_8hpp"/>
      </node>
      <node id="1885">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/lin/string_utils.hpp</label>
        <link refid="services_2lin_2string__utils_8hpp"/>
      </node>
      <node id="1874">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/ethernet/string_utils.hpp</label>
        <link refid="services_2ethernet_2string__utils_8hpp"/>
      </node>
      <node id="1865">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/util/Span.hpp</label>
        <link refid="_span_8hpp"/>
        <childnode refid="1866" relation="include">
        </childnode>
        <childnode refid="1871" relation="include">
        </childnode>
        <childnode refid="1875" relation="include">
        </childnode>
        <childnode refid="1879" relation="include">
        </childnode>
        <childnode refid="1886" relation="include">
        </childnode>
        <childnode refid="1893" relation="include">
        </childnode>
        <childnode refid="1894" relation="include">
        </childnode>
        <childnode refid="1895" relation="include">
        </childnode>
        <childnode refid="1897" relation="include">
        </childnode>
      </node>
      <node id="1867">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/can/all.hpp</label>
        <link refid="services_2can_2all_8hpp"/>
        <childnode refid="1868" relation="include">
        </childnode>
      </node>
      <node id="1877">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp</label>
        <link refid="_i_flexray_controller_8hpp"/>
        <childnode refid="1876" relation="include">
        </childnode>
      </node>
      <node id="1892">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/pubsub/string_utils.hpp</label>
        <link refid="services_2pubsub_2string__utils_8hpp"/>
      </node>
      <node id="1870">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/can/string_utils.hpp</label>
        <link refid="services_2can_2string__utils_8hpp"/>
      </node>
      <node id="1883">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinDatatypesExtensions.hpp</label>
        <link refid="_lin_datatypes_extensions_8hpp"/>
        <childnode refid="1881" relation="include">
        </childnode>
      </node>
      <node id="1888">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/participant/ParticipantExtensions.hpp</label>
        <link refid="_participant_extensions_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_sil_kit_1_1_util_1_1_span" prot="public">SilKit::Util::Span</innerclass>
    <innernamespace refid="namespace_sil_kit">SilKit</innernamespace>
    <innernamespace refid="namespace_sil_kit_1_1_util">SilKit::Util</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2022<sp/>Vector<sp/>Informatik<sp/>GmbH</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="4"><highlight class="comment">a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="5"><highlight class="comment">&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="6"><highlight class="comment">without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="7"><highlight class="comment">distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment">permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment">the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="12"><highlight class="comment">included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment">NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE</highlight></codeline>
<codeline lineno="18"><highlight class="comment">LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION</highlight></codeline>
<codeline lineno="19"><highlight class="comment">OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="20"><highlight class="comment">WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_types_8h" kindref="compound">silkit/capi/Types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exception_8hpp" kindref="compound">silkit/participant/exception.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_sil_kit" kindref="compound">SilKit</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Util<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="38" refid="class_sil_kit_1_1_util_1_1_span" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!std::is_reference&lt;T&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;T<sp/>must<sp/>not<sp/>be<sp/>reference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!std::is_volatile&lt;T&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;T<sp/>must<sp/>not<sp/>be<sp/>volatile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>enable_if_non_const_T_t<sp/>=</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::enable_if_t&lt;!std::is_const&lt;U&gt;::value<sp/>&amp;&amp;<sp/>std::is_same&lt;U,<sp/>std::remove_const_t&lt;T&gt;&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>enable_if_non_const_T_while_T_const_t<sp/>=<sp/>std::enable_if_t&lt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_const&lt;U&gt;::value<sp/>&amp;&amp;<sp/>std::is_const&lt;T&gt;::value<sp/>&amp;&amp;<sp/>std::is_same&lt;U,<sp/>std::remove_const_t&lt;T&gt;&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Public<sp/>Data<sp/>Types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="class_sil_kit_1_1_util_1_1_span_1abe5e1e24cc4b94125863b6e035433d6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1abe5e1e24cc4b94125863b6e035433d6a" kindref="member">iterator</ref><sp/>=<sp/>T*;</highlight></codeline>
<codeline lineno="55" refid="class_sil_kit_1_1_util_1_1_span_1a98c9bf57b2b73448b785e831ab98446c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a98c9bf57b2b73448b785e831ab98446c" kindref="member">const_iterator</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructors,<sp/>Destructor,<sp/>and<sp/>assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a3355afbcbcb0ed2c06af80c4322b7f8a" kindref="member">Span</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a3355afbcbcb0ed2c06af80c4322b7f8a" kindref="member">Span</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a3355afbcbcb0ed2c06af80c4322b7f8a" kindref="member">Span</ref>(<ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>&amp;&amp;)<sp/>noexcept<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>(T*<sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>U,<sp/>enable_if_non_const_T_while_T_const_t&lt;U&gt;<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="67" refid="class_sil_kit_1_1_util_1_1_span_1a9de8acef2727e59aae345557c172ae1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>(<ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>&lt;U&gt;<sp/>other)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>(other.data(),<sp/>other.size())</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/>enable_if_non_const_T_while_T_const_t&lt;U&gt;<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="73" refid="class_sil_kit_1_1_util_1_1_span_1aaa3a76680742ecae2f1e225fb609416c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1aaa3a76680742ecae2f1e225fb609416c" kindref="member">Span</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;U&gt;&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>(vector.<ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>(),<sp/>vector.<ref refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/>enable_if_non_const_T_t&lt;U&gt;<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="79" refid="class_sil_kit_1_1_util_1_1_span_1a539a8278b49c72baac7fed94dc4ef19d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a539a8278b49c72baac7fed94dc4ef19d" kindref="member">Span</ref>(std::vector&lt;U&gt;&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>(vector.<ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>(),<sp/>vector.<ref refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a0fa7923e523c354ce9fa7e70c546150c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>&amp;<sp/>other)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>&amp;<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a0fa7923e523c354ce9fa7e70c546150c" kindref="member">operator=</ref>(<ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>&amp;<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/>enable_if_non_const_T_while_T_const_t&lt;U&gt;<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="88" refid="class_sil_kit_1_1_util_1_1_span_1a2270cd27e5fd2a8fdaa0ee920680f89f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a2270cd27e5fd2a8fdaa0ee920680f89f" kindref="member">operator=</ref>(<ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;U&gt;</ref><sp/>other)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>&amp;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_data<sp/>=<sp/>other.<ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_size<sp/>=<sp/>other.<ref refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/>enable_if_non_const_T_while_T_const_t&lt;U&gt;<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="96" refid="class_sil_kit_1_1_util_1_1_span_1a011beb16e6d3536670dd3d77c4d164dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a011beb16e6d3536670dd3d77c4d164dd" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;U&gt;&amp;<sp/>vector)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>&amp;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_data<sp/>=<sp/>vector.data();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_size<sp/>=<sp/>vector.size();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/>enable_if_non_const_T_t&lt;U&gt;<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="104" refid="class_sil_kit_1_1_util_1_1_span_1a19fa0c503cebdb73a80e02f5b4504ef8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a19fa0c503cebdb73a80e02f5b4504ef8" kindref="member">operator=</ref>(std::vector&lt;U&gt;&amp;<sp/>vector)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span</ref>&amp;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_data<sp/>=<sp/>vector.data();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_size<sp/>=<sp/>vector.size();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>container<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Element<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>pos<sp/>is<sp/>not<sp/>within<sp/>the<sp/>range<sp/>of<sp/>the<sp/>container,<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>std::out_of_range<sp/>is<sp/>thrown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1aa3c0616291cbd691b049727a8e46b7ad" kindref="member">at</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/>-&gt;<sp/>T&amp;;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1aa3c0616291cbd691b049727a8e46b7ad" kindref="member">at</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a40f9f893921689c31716eb3501ed92d2" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/>-&gt;<sp/>T&amp;;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a40f9f893921689c31716eb3501ed92d2" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1ad7758b174d686000d76705eaf0d979da" kindref="member">front</ref>()<sp/>-&gt;<sp/>T&amp;;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1ad7758b174d686000d76705eaf0d979da" kindref="member">front</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1ac29dd66b7984ac75d3ec25aff4a643a6" kindref="member">back</ref>()<sp/>-&gt;<sp/>T&amp;;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1ac29dd66b7984ac75d3ec25aff4a643a6" kindref="member">back</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>()<sp/>-&gt;<sp/>T*;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1ae021c04640355ad1649aa0454026ab8e" kindref="member">begin</ref>()<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1abe5e1e24cc4b94125863b6e035433d6a" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1ae021c04640355ad1649aa0454026ab8e" kindref="member">begin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a98c9bf57b2b73448b785e831ab98446c" kindref="member">const_iterator</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a458e6ee22a1f860e4a05cc7ac9ca65fd" kindref="member">cbegin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a98c9bf57b2b73448b785e831ab98446c" kindref="member">const_iterator</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a36175a01d6b0bddd88348c24e486387c" kindref="member">end</ref>()<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1abe5e1e24cc4b94125863b6e035433d6a" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a36175a01d6b0bddd88348c24e486387c" kindref="member">end</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a98c9bf57b2b73448b785e831ab98446c" kindref="member">const_iterator</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a3df9805ff64a7c455d7800546f74326f" kindref="member">cend</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a98c9bf57b2b73448b785e831ab98446c" kindref="member">const_iterator</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Capacity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1ab5d39e126b1da7b23fb0812dff04db58" kindref="member">empty</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>bool;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" kindref="member">size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>size_t;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a9889368555d0267f897e5253a7e5eb2f" kindref="member">trim_front</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1a9c5ad8ff56929efec0becf47cb1528f0" kindref="member">trim_back</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>private<sp/>data<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>private<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>private<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>_data<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Non-member<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1ae0730c817c9399d43740001176a53640" kindref="member">ToSpan</ref>(std::vector&lt;T&gt;&amp;<sp/>vector)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1ae0730c817c9399d43740001176a53640" kindref="member">ToSpan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>vector)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;const T&gt;</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1ae0730c817c9399d43740001176a53640" kindref="member">ToSpan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___byte_vector" kindref="compound">SilKit_ByteVector</ref>&amp;<sp/>skByteVector)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;const uint8_t&gt;</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1a1799dbf14f09f3cd6ec9e6d5f637a361" kindref="member">ToSilKitByteVector</ref>(<ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;const uint8_t&gt;</ref><sp/>span)<sp/>-&gt;<sp/><ref refid="_types_8h_1a86219ad2b89dda0e3195944f48d93543" kindref="member">SilKit_ByteVector</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1aed214484ba29d316bfdb26dab0e03cbd" kindref="member">ToStdVector</ref>(<ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;</ref><sp/>span)<sp/>-&gt;<sp/>std::vector&lt;std::remove_cv_t&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Inline<sp/>Implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="181" refid="class_sil_kit_1_1_util_1_1_span_1a9933191b32685889031488b85533bd45" refkind="member"><highlight class="normal"><ref refid="class_sil_kit_1_1_util_1_1_span_1a3355afbcbcb0ed2c06af80c4322b7f8a" kindref="member">Span&lt;T&gt;::Span</ref>(T*<sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>,<sp/>std::size_t<sp/><ref refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>_data{data}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>_size{size}</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Element<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="190" refid="class_sil_kit_1_1_util_1_1_span_1aa3c0616291cbd691b049727a8e46b7ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::at</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/>-&gt;<sp/>T&amp;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>_size)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_out_of_range_error" kindref="compound">OutOfRangeError</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>Span&lt;T&gt;<sp/>subscript&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[pos];</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="199" refid="class_sil_kit_1_1_util_1_1_span_1a032a4365381e38d9a51183ec3ddebab4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::at</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>_size)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_out_of_range_error" kindref="compound">OutOfRangeError</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>Span&lt;T&gt;<sp/>subscript&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[pos];</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="208" refid="class_sil_kit_1_1_util_1_1_span_1a40f9f893921689c31716eb3501ed92d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/>-&gt;<sp/>T&amp;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[pos];</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="214" refid="class_sil_kit_1_1_util_1_1_span_1a2eeaae086ca3e90c7beb4c3d32b13434" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[pos];</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="220" refid="class_sil_kit_1_1_util_1_1_span_1ad7758b174d686000d76705eaf0d979da" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::front</ref>()<sp/>-&gt;<sp/>T&amp;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[0];</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="226" refid="class_sil_kit_1_1_util_1_1_span_1a188ae8a2baa60527bfcd2418f78a4925" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::front</ref>()<sp/>const<sp/>-&gt;<sp/>const<sp/>T&amp;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[0];</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="232" refid="class_sil_kit_1_1_util_1_1_span_1ac29dd66b7984ac75d3ec25aff4a643a6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::back</ref>()<sp/>-&gt;<sp/>T&amp;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[_size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="238" refid="class_sil_kit_1_1_util_1_1_span_1a2581513b7fe0fdda5e2d598de6ffe494" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::back</ref>()<sp/>const<sp/>-&gt;<sp/>const<sp/>T&amp;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[_size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="244" refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::data</ref>()<sp/>-&gt;<sp/>T*</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="250" refid="class_sil_kit_1_1_util_1_1_span_1ab0183f63d4efc619b9b33606354e36fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::data</ref>()<sp/>const<sp/>-&gt;<sp/>const<sp/>T*</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="258" refid="class_sil_kit_1_1_util_1_1_span_1ae021c04640355ad1649aa0454026ab8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::begin</ref>()<sp/>-&gt;<sp/>T*</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="264" refid="class_sil_kit_1_1_util_1_1_span_1a508b88393e8ba612b23d0609aebce65b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::begin</ref>()<sp/>const<sp/>-&gt;<sp/>const<sp/>T*</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="270" refid="class_sil_kit_1_1_util_1_1_span_1a458e6ee22a1f860e4a05cc7ac9ca65fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::cbegin</ref>()<sp/>const<sp/>-&gt;<sp/>const<sp/>T*</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="276" refid="class_sil_kit_1_1_util_1_1_span_1a36175a01d6b0bddd88348c24e486387c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::end</ref>()<sp/>-&gt;<sp/>T*</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data<sp/>+<sp/>_size;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="282" refid="class_sil_kit_1_1_util_1_1_span_1a576ce15f2218cbc993357e977a9f65d3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::end</ref>()<sp/>const<sp/>-&gt;<sp/>const<sp/>T*</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data<sp/>+<sp/>_size;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="288" refid="class_sil_kit_1_1_util_1_1_span_1a3df9805ff64a7c455d7800546f74326f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::cend</ref>()<sp/>const<sp/>-&gt;<sp/>const<sp/>T*</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data<sp/>+<sp/>_size;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Capacity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="296" refid="class_sil_kit_1_1_util_1_1_span_1ab5d39e126b1da7b23fb0812dff04db58" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::empty</ref>()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_size<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="302" refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::size</ref>()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_size;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="310" refid="class_sil_kit_1_1_util_1_1_span_1a9889368555d0267f897e5253a7e5eb2f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::trim_front</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(len<sp/>&lt;=<sp/>_size))</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_assertion_error" kindref="compound">AssertionError</ref>(</highlight><highlight class="stringliteral">&quot;Span::trim_front<sp/>assertion<sp/>&apos;len<sp/>&lt;=<sp/>_size&apos;<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>_data<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>_size<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="321" refid="class_sil_kit_1_1_util_1_1_span_1a9c5ad8ff56929efec0becf47cb1528f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;::trim_back</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(len<sp/>&lt;=<sp/>_size))</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_assertion_error" kindref="compound">AssertionError</ref>(</highlight><highlight class="stringliteral">&quot;Span::trim_back<sp/>assertion<sp/>&apos;len<sp/>&lt;=<sp/>_size&apos;<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>_size<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Non-member<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="333" refid="namespace_sil_kit_1_1_util_1acef7e14b2ffea7b9111266e975682c4d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1a2a10cd9a45e3c2137117361447db4763" kindref="member">MakeSpan</ref>(std::array&lt;T,<sp/>N&gt;&amp;<sp/>array)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{array.<ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>(),<sp/>N};</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="339" refid="namespace_sil_kit_1_1_util_1a2a10cd9a45e3c2137117361447db4763" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1a2a10cd9a45e3c2137117361447db4763" kindref="member">MakeSpan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;T,<sp/>N&gt;&amp;<sp/>array)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;const T&gt;</ref></highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{array.<ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>(),<sp/>N};</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="345" refid="namespace_sil_kit_1_1_util_1ae0730c817c9399d43740001176a53640" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1a10dccbed73a87ff807878e09003a7cb6" kindref="member">ToSpan</ref>(std::vector&lt;T&gt;&amp;<sp/>vector)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{vector.<ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>(),<sp/>vector.size()};</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="351" refid="namespace_sil_kit_1_1_util_1aa6a45dca68b13f9f2fa5916b0f278a0f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1a10dccbed73a87ff807878e09003a7cb6" kindref="member">ToSpan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>vector)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;const T&gt;</ref></highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{vector.<ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>(),<sp/>vector.size()};</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="namespace_sil_kit_1_1_util_1a10dccbed73a87ff807878e09003a7cb6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1a10dccbed73a87ff807878e09003a7cb6" kindref="member">ToSpan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___byte_vector" kindref="compound">SilKit_ByteVector</ref>&amp;<sp/>skByteVector)<sp/>-&gt;<sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;const uint8_t&gt;</ref></highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{skByteVector.<ref refid="struct_sil_kit___byte_vector_1a89d6013b61d690c1345aab80b7afb4b6" kindref="member">data</ref>,<sp/>skByteVector.<ref refid="struct_sil_kit___byte_vector_1a14b1719d680df7c623992de7dd7521e4" kindref="member">size</ref>};</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="namespace_sil_kit_1_1_util_1a1799dbf14f09f3cd6ec9e6d5f637a361" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1a1799dbf14f09f3cd6ec9e6d5f637a361" kindref="member">ToSilKitByteVector</ref>(<ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;const uint8_t&gt;</ref><sp/>span)<sp/>-&gt;<sp/><ref refid="struct_sil_kit___byte_vector" kindref="compound">SilKit_ByteVector</ref></highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___byte_vector" kindref="compound">SilKit_ByteVector</ref>{span.<ref refid="class_sil_kit_1_1_util_1_1_span_1ab5d39e126b1da7b23fb0812dff04db58" kindref="member">empty</ref>()<sp/>?<sp/>nullptr<sp/>:<sp/>span.<ref refid="class_sil_kit_1_1_util_1_1_span_1af52376645fd477ef4339a6452acb0587" kindref="member">data</ref>(),<sp/>span.<ref refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" kindref="member">size</ref>()};</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="367" refid="namespace_sil_kit_1_1_util_1aed214484ba29d316bfdb26dab0e03cbd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1aed214484ba29d316bfdb26dab0e03cbd" kindref="member">ToStdVector</ref>(<ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;</ref><sp/>span)<sp/>-&gt;<sp/>std::vector&lt;std::remove_cv_t&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{span.<ref refid="class_sil_kit_1_1_util_1_1_span_1ae021c04640355ad1649aa0454026ab8e" kindref="member">begin</ref>(),<sp/>span.<ref refid="class_sil_kit_1_1_util_1_1_span_1a36175a01d6b0bddd88348c24e486387c" kindref="member">end</ref>()};</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="373" refid="namespace_sil_kit_1_1_util_1a49fd58fb4eee496074eef0a2a56e7c55" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_util_1a49fd58fb4eee496074eef0a2a56e7c55" kindref="member">ItemsAreEqual</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_util_1_1_span" kindref="compound">Span&lt;U&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::equal(lhs.<ref refid="class_sil_kit_1_1_util_1_1_span_1ae021c04640355ad1649aa0454026ab8e" kindref="member">begin</ref>(),<sp/>lhs.<ref refid="class_sil_kit_1_1_util_1_1_span_1a36175a01d6b0bddd88348c24e486387c" kindref="member">end</ref>(),<sp/>rhs.<ref refid="class_sil_kit_1_1_util_1_1_span_1ae021c04640355ad1649aa0454026ab8e" kindref="member">begin</ref>(),<sp/>rhs.<ref refid="class_sil_kit_1_1_util_1_1_span_1a36175a01d6b0bddd88348c24e486387c" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Util</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>SilKit</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/util/Span.hpp"/>
  </compounddef>
</doxygen>
