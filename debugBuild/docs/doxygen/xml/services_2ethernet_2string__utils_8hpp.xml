<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="services_2ethernet_2string__utils_8hpp" kind="file" language="C++">
    <compoundname>string_utils.hpp</compoundname>
    <includes local="no">ostream</includes>
    <includes local="no">sstream</includes>
    <includes refid="exception_8hpp" local="yes">silkit/participant/exception.hpp</includes>
    <includes refid="_printable_hex_string_8hpp" local="yes">silkit/util/PrintableHexString.hpp</includes>
    <includes refid="services_2string__utils_8hpp" local="yes">silkit/services/string_utils.hpp</includes>
    <includes refid="_ethernet_datatypes_8hpp" local="yes">EthernetDatatypes.hpp</includes>
    <incdepgraph>
      <node id="814">
        <label>iomanip</label>
      </node>
      <node id="813">
        <label>limits</label>
      </node>
      <node id="821">
        <label>EthernetDatatypes.hpp</label>
        <link refid="_ethernet_datatypes_8hpp"/>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
        <childnode refid="826" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
      </node>
      <node id="819">
        <label>cstdint</label>
      </node>
      <node id="830">
        <label>stdint.h</label>
      </node>
      <node id="818">
        <label>datatypes.hpp</label>
        <link refid="datatypes_8hpp"/>
        <childnode refid="819" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
      </node>
      <node id="809">
        <label>silkit/participant/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
      </node>
      <node id="810">
        <label>stdexcept</label>
      </node>
      <node id="811">
        <label>string</label>
      </node>
      <node id="832">
        <label>silkit/capi/Ethernet.h</label>
        <link refid="_ethernet_8h"/>
        <childnode refid="830" relation="include">
        </childnode>
        <childnode refid="825" relation="include">
        </childnode>
        <childnode refid="829" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
      </node>
      <node id="812">
        <label>silkit/util/PrintableHexString.hpp</label>
        <link refid="_printable_hex_string_8hpp"/>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="814" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
      </node>
      <node id="831">
        <label>stddef.h</label>
      </node>
      <node id="835">
        <label>memory.h</label>
      </node>
      <node id="807">
        <label>ostream</label>
      </node>
      <node id="834">
        <label>limits.h</label>
      </node>
      <node id="825">
        <label>capi/SilKitMacros.h</label>
        <link refid="_sil_kit_macros_8h"/>
        <childnode refid="819" relation="include">
        </childnode>
      </node>
      <node id="827">
        <label>vector</label>
      </node>
      <node id="820">
        <label>silkit/util/HandlerId.hpp</label>
        <link refid="_handler_id_8hpp"/>
        <childnode refid="819" relation="include">
        </childnode>
      </node>
      <node id="815">
        <label>utility</label>
      </node>
      <node id="822">
        <label>array</label>
      </node>
      <node id="808">
        <label>sstream</label>
      </node>
      <node id="806">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/ethernet/string_utils.hpp</label>
        <link refid="services_2ethernet_2string__utils_8hpp"/>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
      </node>
      <node id="824">
        <label>silkit/SilKitMacros.hpp</label>
        <link refid="_sil_kit_macros_8hpp"/>
        <childnode refid="825" relation="include">
        </childnode>
      </node>
      <node id="826">
        <label>silkit/util/Span.hpp</label>
        <link refid="_span_8hpp"/>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="827" relation="include">
        </childnode>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="828" relation="include">
        </childnode>
        <childnode refid="829" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
      </node>
      <node id="823">
        <label>chrono</label>
      </node>
      <node id="817">
        <label>silkit/services/string_utils.hpp</label>
        <link refid="services_2string__utils_8hpp"/>
        <childnode refid="814" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
      </node>
      <node id="833">
        <label>silkit/capi/InterfaceIdentifiers.h</label>
        <link refid="_interface_identifiers_8h"/>
        <childnode refid="834" relation="include">
        </childnode>
        <childnode refid="830" relation="include">
        </childnode>
        <childnode refid="835" relation="include">
        </childnode>
        <childnode refid="825" relation="include">
        </childnode>
        <childnode refid="829" relation="include">
        </childnode>
      </node>
      <node id="828">
        <label>type_traits</label>
      </node>
      <node id="816">
        <label>algorithm</label>
      </node>
      <node id="829">
        <label>silkit/capi/Types.h</label>
        <link refid="_types_8h"/>
        <childnode refid="830" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
        <childnode refid="825" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_sil_kit">SilKit</innernamespace>
    <innernamespace refid="namespace_sil_kit_1_1_services">SilKit::Services</innernamespace>
    <innernamespace refid="namespace_sil_kit_1_1_services_1_1_ethernet">SilKit::Services::Ethernet</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2022<sp/>Vector<sp/>Informatik<sp/>GmbH</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="4"><highlight class="comment">a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="5"><highlight class="comment">&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="6"><highlight class="comment">without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="7"><highlight class="comment">distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment">permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment">the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="12"><highlight class="comment">included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment">NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE</highlight></codeline>
<codeline lineno="18"><highlight class="comment">LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION</highlight></codeline>
<codeline lineno="19"><highlight class="comment">OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="20"><highlight class="comment">WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exception_8hpp" kindref="compound">silkit/participant/exception.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_printable_hex_string_8hpp" kindref="compound">silkit/util/PrintableHexString.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="services_2string__utils_8hpp" kindref="compound">silkit/services/string_utils.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_ethernet_datatypes_8hpp" kindref="compound">EthernetDatatypes.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_sil_kit" kindref="compound">SilKit</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Services<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Ethernet<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(<ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1abc4119554b7926d385cfe9443c1c6124" kindref="member">EthernetTransmitStatus</ref><sp/>value);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(<ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a10a56ade778c751ce52749d8bcecb147" kindref="member">EthernetState</ref><sp/>value);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EthernetFrame&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EthernetFrameEvent&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EthernetFrameTransmitEvent&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1abc4119554b7926d385cfe9443c1c6124" kindref="member">EthernetTransmitStatus</ref><sp/>value);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a10a56ade778c751ce52749d8bcecb147" kindref="member">EthernetState</ref><sp/>value);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EthernetFrame&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EthernetFrameEvent&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EthernetFrameTransmitEvent&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Inline<sp/>Implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(<ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1abc4119554b7926d385cfe9443c1c6124" kindref="member">EthernetTransmitStatus</ref><sp/>value)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1abc4119554b7926d385cfe9443c1c6124aa5b0d6c4be9dd1b8b05c4146fce1b2e1" kindref="member">EthernetTransmitStatus::Transmitted</ref>:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Transmitted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1abc4119554b7926d385cfe9443c1c6124a071681df2702c521bdf3f86d5dd067ad" kindref="member">EthernetTransmitStatus::ControllerInactive</ref>:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ControllerInactive&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1abc4119554b7926d385cfe9443c1c6124aed24adca6bafecf505ccfec607baae60" kindref="member">EthernetTransmitStatus::LinkDown</ref>:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;LinkDown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1abc4119554b7926d385cfe9443c1c6124a74339e8d9916761b9b69183a081076c6" kindref="member">EthernetTransmitStatus::Dropped</ref>:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Dropped&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1abc4119554b7926d385cfe9443c1c6124a55e32de6901e8afadbea93439c764118" kindref="member">EthernetTransmitStatus::InvalidFrameFormat</ref>:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;InvalidFrameFormat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_type_conversion_error" kindref="compound">SilKit::TypeConversionError</ref>{};</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="namespace_sil_kit_1_1_services_1_1_ethernet_1af0e5d5d4f15628be27c9ece58b897bac" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(<ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a10a56ade778c751ce52749d8bcecb147" kindref="member">EthernetState</ref><sp/>value)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a10a56ade778c751ce52749d8bcecb147a3cab03c00dbd11bc3569afa0748013f0" kindref="member">EthernetState::Inactive</ref>:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Inactive&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1abc4119554b7926d385cfe9443c1c6124aed24adca6bafecf505ccfec607baae60" kindref="member">EthernetState::LinkDown</ref>:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;LinkDown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a10a56ade778c751ce52749d8bcecb147a8d95de9e9f0ffbdc9901ee31aa38b3a4" kindref="member">EthernetState::LinkUp</ref>:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;LinkUp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_sil_kit_1_1_type_conversion_error" kindref="compound">SilKit::TypeConversionError</ref>{};</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="namespace_sil_kit_1_1_services_1_1_ethernet_1ab602595c467353ddf7a0b6135b6cf3ff" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame" kindref="compound">EthernetFrame</ref>&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>msg;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="namespace_sil_kit_1_1_services_1_1_ethernet_1ab2c58b4360536632e5dd9e42bfb043c3" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_event" kindref="compound">EthernetFrameEvent</ref>&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>msg;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="namespace_sil_kit_1_1_services_1_1_ethernet_1aba8d64d6241bee5673ed9c704cc1dc0f" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_transmit_event" kindref="compound">EthernetFrameTransmitEvent</ref>&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>msg;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1abc4119554b7926d385cfe9443c1c6124" kindref="member">EthernetTransmitStatus</ref><sp/>value)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>&lt;&lt;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(value);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a98eecd9166a58f373de20b8acd45368f" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a10a56ade778c751ce52749d8bcecb147" kindref="member">EthernetState</ref><sp/>value)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>&lt;&lt;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a64edc19d1be204d1a7fa28511a51facc" kindref="member">to_string</ref>(value);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9e5dd11dba8e8e417758d9b4ebc3e584" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame" kindref="compound">EthernetFrame</ref>&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_1a40559fd602814306e5813f6d08a49623" kindref="member">raw</ref>.<ref refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" kindref="member">size</ref>()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EthernetFrame{size=0}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>EthernetMac<sp/>=<sp/>std::array&lt;uint8_t,<sp/>6&gt;;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EthernetFrame{size=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_1a40559fd602814306e5813f6d08a49623" kindref="member">raw</ref>.<ref refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_1a40559fd602814306e5813f6d08a49623" kindref="member">raw</ref>.<ref refid="class_sil_kit_1_1_util_1_1_span_1ad198f88522a763203da4d2b09d2f37f9" kindref="member">size</ref>()<sp/>&gt;=<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(EthernetMac))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EthernetMac<sp/>destinationMac;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EthernetMac<sp/>sourceMac;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_1a40559fd602814306e5813f6d08a49623" kindref="member">raw</ref>.<ref refid="class_sil_kit_1_1_util_1_1_span_1ae021c04640355ad1649aa0454026ab8e" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_1a40559fd602814306e5813f6d08a49623" kindref="member">raw</ref>.<ref refid="class_sil_kit_1_1_util_1_1_span_1ae021c04640355ad1649aa0454026ab8e" kindref="member">begin</ref>()<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(EthernetMac),<sp/>destinationMac.begin());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_1a40559fd602814306e5813f6d08a49623" kindref="member">raw</ref>.<ref refid="class_sil_kit_1_1_util_1_1_span_1ae021c04640355ad1649aa0454026ab8e" kindref="member">begin</ref>()<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(EthernetMac),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_1a40559fd602814306e5813f6d08a49623" kindref="member">raw</ref>.<ref refid="class_sil_kit_1_1_util_1_1_span_1ae021c04640355ad1649aa0454026ab8e" kindref="member">begin</ref>()<sp/>+<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(EthernetMac),<sp/>sourceMac.begin());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>src<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespace_sil_kit_1_1_util_1a0fd44922c037ccc53a6b507432434a4e" kindref="member">Util::AsHexString</ref>(sourceMac).WithSeparator(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>dst=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespace_sil_kit_1_1_util_1a0fd44922c037ccc53a6b507432434a4e" kindref="member">Util::AsHexString</ref>(destinationMac).WithSeparator(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>data=[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespace_sil_kit_1_1_util_1a0fd44922c037ccc53a6b507432434a4e" kindref="member">Util::AsHexString</ref>(msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_1a40559fd602814306e5813f6d08a49623" kindref="member">raw</ref>).WithSeparator(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">).WithMaxLength(8)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="namespace_sil_kit_1_1_services_1_1_ethernet_1aba1ebc1bd47c74b25a3ced5b4c5457a6" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_event" kindref="compound">EthernetFrameEvent</ref>&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>timestamp<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::duration&lt;double,<sp/>std::milli&gt;&gt;(msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_event_1a239322709e27501d3c8b944a94ae6e8e" kindref="member">timestamp</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EthernetFrameEvent{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_event_1a10487ac5a2be1590effae3eff379d5d8" kindref="member">frame</ref></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>direction=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_event_1a7800f79a0f621afa58552dfd3ecd778f" kindref="member">direction</ref></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>userContext=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_event_1ae561a05342fddfe37909c7a3b12e9cd3" kindref="member">userContext</ref></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>@&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timestamp.count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="namespace_sil_kit_1_1_services_1_1_ethernet_1ac8016dcccf5a28c03cf0e6d34b3644d3" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespace_sil_kit_1_1_services_1_1_ethernet_1a9836331895ee494052ecc0d7efec4b8c" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_transmit_event" kindref="compound">EthernetFrameTransmitEvent</ref>&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>timestamp<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::duration&lt;double,<sp/>std::milli&gt;&gt;(msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_transmit_event_1a6c6f1f20c251232f0f0bc46d7a66ccf9" kindref="member">timestamp</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>out</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EthernetFrameTransmitEvent{status=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_transmit_event_1a6e8adba75b2b576f5c86bd8e7aac5079" kindref="member">status</ref></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>userContext=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg.<ref refid="struct_sil_kit_1_1_services_1_1_ethernet_1_1_ethernet_frame_transmit_event_1a51e2aaa47ddb49bb9fe78f42c1e608c4" kindref="member">userContext</ref></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>@&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timestamp.count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ethernet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Services</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>SilKit</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/ethernet/string_utils.hpp"/>
  </compounddef>
</doxygen>
