<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_lin_8h" kind="file" language="C++">
    <compoundname>Lin.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="_sil_kit_macros_8h" local="yes">silkit/capi/SilKitMacros.h</includes>
    <includes refid="_types_8h" local="yes">silkit/capi/Types.h</includes>
    <includes refid="_interface_identifiers_8h" local="yes">silkit/capi/InterfaceIdentifiers.h</includes>
    <includedby refid="_sil_kit_8h" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/capi/SilKit.h</includedby>
    <includedby refid="_lin_datatypes_8hpp" local="yes">/home/ubuntu/sil-kit/SilKit/include/silkit/services/lin/LinDatatypes.hpp</includedby>
    <incdepgraph>
      <node id="115">
        <label>cstdint</label>
      </node>
      <node id="113">
        <label>stdint.h</label>
      </node>
      <node id="117">
        <label>stddef.h</label>
      </node>
      <node id="120">
        <label>memory.h</label>
      </node>
      <node id="119">
        <label>limits.h</label>
      </node>
      <node id="114">
        <label>silkit/capi/SilKitMacros.h</label>
        <link refid="_sil_kit_macros_8h"/>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h</label>
        <link refid="_lin_8h"/>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>silkit/capi/InterfaceIdentifiers.h</label>
        <link refid="_interface_identifiers_8h"/>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>silkit/capi/Types.h</label>
        <link refid="_types_8h"/>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="122">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/capi/SilKit.h</label>
        <link refid="_sil_kit_8h"/>
      </node>
      <node id="123">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/lin/LinDatatypes.hpp</label>
        <link refid="_lin_datatypes_8hpp"/>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/string_utils.hpp</label>
        <link refid="experimental_2services_2lin_2string__utils_8hpp"/>
      </node>
      <node id="124">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/lin/ILinController.hpp</label>
        <link refid="_i_lin_controller_8hpp"/>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinControllerExtensions.hpp</label>
        <link refid="_lin_controller_extensions_8hpp"/>
        <childnode refid="126" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/lin/all.hpp</label>
        <link refid="services_2lin_2all_8hpp"/>
        <childnode refid="129" relation="include">
        </childnode>
      </node>
      <node id="129">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/all.hpp</label>
        <link refid="services_2all_8hpp"/>
      </node>
      <node id="130">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/services/lin/string_utils.hpp</label>
        <link refid="services_2lin_2string__utils_8hpp"/>
      </node>
      <node id="121">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h</label>
        <link refid="_lin_8h"/>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>/home/ubuntu/sil-kit/SilKit/include/silkit/experimental/services/lin/LinDatatypesExtensions.hpp</label>
        <link refid="_lin_datatypes_extensions_8hpp"/>
        <childnode refid="125" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_sil_kit___lin_frame" prot="public">SilKit_LinFrame</innerclass>
    <innerclass refid="struct_sil_kit___lin_frame_status_event" prot="public">SilKit_LinFrameStatusEvent</innerclass>
    <innerclass refid="struct_sil_kit___lin_wakeup_event" prot="public">SilKit_LinWakeupEvent</innerclass>
    <innerclass refid="struct_sil_kit___lin_go_to_sleep_event" prot="public">SilKit_LinGoToSleepEvent</innerclass>
    <innerclass refid="struct_sil_kit___experimental___lin_slave_configuration_event" prot="public">SilKit_Experimental_LinSlaveConfigurationEvent</innerclass>
    <innerclass refid="struct_sil_kit___lin_frame_response" prot="public">SilKit_LinFrameResponse</innerclass>
    <innerclass refid="struct_sil_kit___lin_controller_config" prot="public">SilKit_LinControllerConfig</innerclass>
    <innerclass refid="struct_sil_kit___experimental___lin_controller_dynamic_config" prot="public">SilKit_Experimental_LinControllerDynamicConfig</innerclass>
    <innerclass refid="struct_sil_kit___experimental___lin_slave_configuration" prot="public">SilKit_Experimental_LinSlaveConfiguration</innerclass>
    <innerclass refid="struct_sil_kit___experimental___lin_frame_header_event" prot="public">SilKit_Experimental_LinFrameHeaderEvent</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_lin_8h_1aab007f1751ee688c640a2aa0523b26a7" prot="public" static="no">
        <name>SilKit_LinControllerStatus_Unknown</name>
        <initializer>((<ref refid="_lin_8h_1ae0010660601f6fbe2df6ed0683c740ee" kindref="member">SilKit_LinControllerStatus</ref>)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The controller state is not yet known. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="38" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a54589e5817849f15be48ff8d232d53bb" prot="public" static="no">
        <name>SilKit_LinControllerStatus_Operational</name>
        <initializer>((<ref refid="_lin_8h_1ae0010660601f6fbe2df6ed0683c740ee" kindref="member">SilKit_LinControllerStatus</ref>)1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Normal operation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="40" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a53b2125ab719fa50c27579d54c1f4b99" prot="public" static="no">
        <name>SilKit_LinControllerStatus_Sleep</name>
        <initializer>((<ref refid="_lin_8h_1ae0010660601f6fbe2df6ed0683c740ee" kindref="member">SilKit_LinControllerStatus</ref>)2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sleep state operation; in this state wake-up detection from slave nodes is enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="42" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1aeefc35d08366db8bd385c3ffdb6c5577" prot="public" static="no">
        <name>SilKit_LinControllerStatus_SleepPending</name>
        <initializer>((<ref refid="_lin_8h_1ae0010660601f6fbe2df6ed0683c740ee" kindref="member">SilKit_LinControllerStatus</ref>)3)</initializer>
        <briefdescription>
<para>Sleep Pending state is reached when a GoToSleep is issued. </para>        </briefdescription>
        <detaileddescription>
<para>This allows the network simulator to finish pending transmissions (e.g., sleep frames to slaves) before entering state Sleep, cf. AUTOSAR SWS LINDriver [SWS_LIN_00266] and section 7.3.3. This is only used when using detailed simulations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="49" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a37c5edc49e792f038517fb890d26f54b" prot="public" static="no">
        <name>SilKit_LinControllerMode_Inactive</name>
        <initializer>((<ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref>)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The LIN controller has not been configured yet and is inactive. This does not indicate sleep mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="59" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1ae95b9f8d16e642f9d7cfd1a4cd89f194" prot="public" static="no">
        <name>SilKit_LinControllerMode_Master</name>
        <initializer>((<ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref>)1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A LIN controller with active master task and slave task </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="61" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1ae9abc6e16d23d82e574b418778bb47fd" prot="public" static="no">
        <name>SilKit_LinControllerMode_Slave</name>
        <initializer>((<ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref>)2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A LIN controller with only a slave task </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="63" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a48588e4bb8070bf9ef75c1debf5b46af" prot="public" static="no">
        <name>SilKit_LinFrameResponseMode_Unused</name>
        <initializer>((<ref refid="_lin_8h_1a04b93526f53b7ae7d16a2688e63a76b2" kindref="member">SilKit_LinFrameResponseMode</ref>)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The LinFrameResponse corresponding to the ID is neither received nor transmitted by the LIN slave. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="75" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a2ddcf1b2f1320b120e78bacc734ed665" prot="public" static="no">
        <name>SilKit_LinFrameResponseMode_Rx</name>
        <initializer>((<ref refid="_lin_8h_1a04b93526f53b7ae7d16a2688e63a76b2" kindref="member">SilKit_LinFrameResponseMode</ref>)1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The LinFrameResponse corresponding to the ID is received by the LIN slave. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="77" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a9bd4b540e9361769031c5137e576f62e" prot="public" static="no">
        <name>SilKit_LinFrameResponseMode_TxUnconditional</name>
        <initializer>((<ref refid="_lin_8h_1a04b93526f53b7ae7d16a2688e63a76b2" kindref="member">SilKit_LinFrameResponseMode</ref>)2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The LinFrameResponse corresponding to the ID is transmitted unconditionally by the LIN slave. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="79" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a8b3a5d8851d9d036a5a101b45eb57257" prot="public" static="no">
        <name>SilKit_LinChecksumModel_Unknown</name>
        <initializer>((<ref refid="_lin_8h_1ab62b46b7945a6daace65b4284946ff91" kindref="member">SilKit_LinChecksumModel</ref>)0)</initializer>
        <briefdescription>
<para>Unknown checksum model. If configured with this value, the checksum model of the first reception will be used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="95" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1ae4e9a064ff445535254a5856352cd50c" prot="public" static="no">
        <name>SilKit_LinChecksumModel_Enhanced</name>
        <initializer>((<ref refid="_lin_8h_1ab62b46b7945a6daace65b4284946ff91" kindref="member">SilKit_LinChecksumModel</ref>)1)</initializer>
        <briefdescription>
<para>Enhanced checksum model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="96" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a8ff3f79ef412fc016300de88be2bb233" prot="public" static="no">
        <name>SilKit_LinChecksumModel_Classic</name>
        <initializer>((<ref refid="_lin_8h_1ab62b46b7945a6daace65b4284946ff91" kindref="member">SilKit_LinChecksumModel</ref>)2)</initializer>
        <briefdescription>
<para>Classic checksum model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="97" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a5e7e4692850d5fce01f1b3d65f353a24" prot="public" static="no">
        <name>SilKit_LinFrameResponseType_MasterResponse</name>
        <initializer>((<ref refid="_lin_8h_1acf52690042a3ae9b5c5b2428cdc75c81" kindref="member">SilKit_LinFrameResponseType</ref>)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Response is generated from this (master) node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="106" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a33c2d7443d8e32354ed397a772d9c33a" prot="public" static="no">
        <name>SilKit_LinFrameResponseType_SlaveResponse</name>
        <initializer>((<ref refid="_lin_8h_1acf52690042a3ae9b5c5b2428cdc75c81" kindref="member">SilKit_LinFrameResponseType</ref>)1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Response is generated from a remote slave node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="108" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a6a06e45eb54d37fde63715be71aa2aa3" prot="public" static="no">
        <name>SilKit_LinFrameResponseType_SlaveToSlave</name>
        <initializer>((<ref refid="_lin_8h_1acf52690042a3ae9b5c5b2428cdc75c81" kindref="member">SilKit_LinFrameResponseType</ref>)2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Response is generated from one slave to and received by another slave, for the master the response will be anonymous, it does not have to receive the response. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="113" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a421c3abf319572f71c8e8f5aa7870dc7" prot="public" static="no">
        <name>SilKit_LinFrameStatus_NOT_OK</name>
        <initializer>((<ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(currently not in use) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="130" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a5458ca9cc4f09f7e71d02ce7b6f6e751" prot="public" static="no">
        <name>SilKit_LinFrameStatus_LIN_TX_OK</name>
        <initializer>((<ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>)1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The controller successfully transmitted a frame response. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="132" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1aee4303875285ed9ceb667988d858e91d" prot="public" static="no">
        <name>SilKit_LinFrameStatus_LIN_TX_BUSY</name>
        <initializer>((<ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>)2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(currently not in use) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="134" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a756edd4e06fa2f558b92b53315cf1308" prot="public" static="no">
        <name>SilKit_LinFrameStatus_LIN_TX_HEADER_ERROR</name>
        <initializer>((<ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>)3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(currently not in use) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="136" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a62502ba5da46ccc6e48ecda2dd6d5426" prot="public" static="no">
        <name>SilKit_LinFrameStatus_LIN_TX_ERROR</name>
        <initializer>((<ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>)4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(currently not in use) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="138" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1acdc5e8bc49b6bb3927dda95daee7100f" prot="public" static="no">
        <name>SilKit_LinFrameStatus_LIN_RX_OK</name>
        <initializer>((<ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>)5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The controller received a correct frame response. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="140" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1a2db355f9cf18bc45f0b446e30bdfd1ff" prot="public" static="no">
        <name>SilKit_LinFrameStatus_LIN_RX_BUSY</name>
        <initializer>((<ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>)6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(currently not in use) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="142" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1ae68afd10a3df0feff95fcb2408d07e5f" prot="public" static="no">
        <name>SilKit_LinFrameStatus_LIN_RX_ERROR</name>
        <initializer>((<ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>)7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The reception of a response failed.</para><para>Indicates a mismatch in expected and received data length or a checksum error. Checksum errors occur when multiple slaves are configured to transmit the same frame or when the sender and receiver use different checksum models. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="150" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_lin_8h_1ae482ee9a3d3f7743b5d5c9ab5f653e7c" prot="public" static="no">
        <name>SilKit_LinFrameStatus_LIN_RX_NO_RESPONSE</name>
        <initializer>((<ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>)8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No LIN controller did provide a response to the frame header. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="152" column="9" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_lin_8h_1ae0010660601f6fbe2df6ed0683c740ee" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t SilKit_LinControllerStatus</definition>
        <argsstring></argsstring>
        <name>SilKit_LinControllerStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The operational state of the controller, i.e., operational or sleeping. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="36" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t SilKit_LinControllerMode</definition>
        <argsstring></argsstring>
        <name>SilKit_LinControllerMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used to configure a LIN controller as a master or slave.</para><para>Cf. <ref refid="struct_sil_kit___lin_controller_config" kindref="compound">SilKit_LinControllerConfig</ref>, <ref refid="_lin_8h_1a23f4ad8c054ffab15825277f24d2e264" kindref="member">SilKit_LinController_Init()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="55" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a87f84094445e3127075578c73f0083e9" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t SilKit_LinBaudRate</definition>
        <argsstring></argsstring>
        <name>SilKit_LinBaudRate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The operational baud rate of the controller. Used in detailed simulation.</para><para><emphasis>Range:</emphasis> 200...20&apos;000 Bd </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="70" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a04b93526f53b7ae7d16a2688e63a76b2" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t SilKit_LinFrameResponseMode</definition>
        <argsstring></argsstring>
        <name>SilKit_LinFrameResponseMode</name>
        <briefdescription>
<para>Controls the behavior of a LIN Slave task for a particular LIN ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="73" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a6af0cc9696323532582d1c980cc4fa58" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t SilKit_LinId</definition>
        <argsstring></argsstring>
        <name>SilKit_LinId</name>
        <briefdescription>
<para>The identifier of a LIN <ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This type represents all valid identifier used by <ref refid="_lin_8h_1a9116a4c3f428f5ef7aa287f17a7b1157" kindref="member">SilKit_LinController_SendFrame()</ref>, <ref refid="_lin_8h_1ac1514b2f7d1aee2f5188b1d2726a7143" kindref="member">SilKit_LinController_SendFrameHeader()</ref>.</para><para><emphasis>Range:</emphasis> 0...0x3F </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="88" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1ab62b46b7945a6daace65b4284946ff91" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t SilKit_LinChecksumModel</definition>
        <argsstring></argsstring>
        <name>SilKit_LinChecksumModel</name>
        <briefdescription>
<para>The checksum model of a LIN <ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This type is used to specify the Checksum model to be used for the LIN <ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="94" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1acf52690042a3ae9b5c5b2428cdc75c81" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t SilKit_LinFrameResponseType</definition>
        <argsstring></argsstring>
        <name>SilKit_LinFrameResponseType</name>
        <briefdescription>
<para>Controls the behavior of <ref refid="_lin_8h_1a9116a4c3f428f5ef7aa287f17a7b1157" kindref="member">SilKit_LinController_SendFrame()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Determines whether the master also provides a frame response or if the frame response is expected to be provided from a slave. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="104" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t SilKit_LinFrameStatus</definition>
        <argsstring></argsstring>
        <name>SilKit_LinFrameStatus</name>
        <briefdescription>
<para>The state of a LIN transmission. </para>        </briefdescription>
        <detaileddescription>
<para>Used to indicate the success or failure of a LIN transmission to a registered <ref refid="_lin_8h_1a4504ff1b91644ba2d13910338395dd37" kindref="member">SilKit_LinFrameStatusHandler_t</ref>.</para><para><emphasis>Note:</emphasis> the enumeration values directly correspond to the AUTOSAR type Lin_StatusType. Not all values are used in the SIL Kit.</para><para><emphasis>AUTOSAR Doc:</emphasis> LIN operation states for a LIN channel or frame, as returned by the API service Lin_GetStatus(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="127" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a731260f9964b5882339addc6f44ce8a6" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t SilKit_LinDataLength</definition>
        <argsstring></argsstring>
        <name>SilKit_LinDataLength</name>
        <briefdescription>
<para>The data length of a LIN <ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref> in bytes. </para>        </briefdescription>
        <detaileddescription>
<para>This type is used to specify the number of data bytes to copy.</para><para><emphasis>Range:</emphasis> 1...8 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="160" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a2e179e29a077a066b7933e6c55f74efe" prot="public" static="no">
        <type>struct <ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref></type>
        <definition>typedef struct SilKit_LinFrame SilKit_LinFrame</definition>
        <argsstring></argsstring>
        <name>SilKit_LinFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a4d49bd8bbda1353a0ba9f532cdf788d5" prot="public" static="no">
        <type>struct <ref refid="struct_sil_kit___lin_frame_status_event" kindref="compound">SilKit_LinFrameStatusEvent</ref></type>
        <definition>typedef struct SilKit_LinFrameStatusEvent SilKit_LinFrameStatusEvent</definition>
        <argsstring></argsstring>
        <name>SilKit_LinFrameStatusEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a2a31ebeb34a260c00a499e9ed3603abc" prot="public" static="no">
        <type>struct <ref refid="struct_sil_kit___lin_wakeup_event" kindref="compound">SilKit_LinWakeupEvent</ref></type>
        <definition>typedef struct SilKit_LinWakeupEvent SilKit_LinWakeupEvent</definition>
        <argsstring></argsstring>
        <name>SilKit_LinWakeupEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1af8777524d78a2f9b36e6d5117a7dcc70" prot="public" static="no">
        <type>struct <ref refid="struct_sil_kit___lin_go_to_sleep_event" kindref="compound">SilKit_LinGoToSleepEvent</ref></type>
        <definition>typedef struct SilKit_LinGoToSleepEvent SilKit_LinGoToSleepEvent</definition>
        <argsstring></argsstring>
        <name>SilKit_LinGoToSleepEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1aa0f694766ed7307111624c819c7292e4" prot="public" static="no">
        <type>struct <ref refid="struct_sil_kit___experimental___lin_slave_configuration_event" kindref="compound">SilKit_Experimental_LinSlaveConfigurationEvent</ref></type>
        <definition>typedef struct SilKit_Experimental_LinSlaveConfigurationEvent SilKit_Experimental_LinSlaveConfigurationEvent</definition>
        <argsstring></argsstring>
        <name>SilKit_Experimental_LinSlaveConfigurationEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1ab9c8dd21d8b4ee00753e41c00ef4c0e9" prot="public" static="no">
        <type>struct <ref refid="struct_sil_kit___lin_frame_response" kindref="compound">SilKit_LinFrameResponse</ref></type>
        <definition>typedef struct SilKit_LinFrameResponse SilKit_LinFrameResponse</definition>
        <argsstring></argsstring>
        <name>SilKit_LinFrameResponse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a308fd1599c5502f2eed6377a6f1c1bc7" prot="public" static="no">
        <type>struct <ref refid="struct_sil_kit___lin_controller_config" kindref="compound">SilKit_LinControllerConfig</ref></type>
        <definition>typedef struct SilKit_LinControllerConfig SilKit_LinControllerConfig</definition>
        <argsstring></argsstring>
        <name>SilKit_LinControllerConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a1b33a3a57c49faef8b3bad27879d708b" prot="public" static="no">
        <type>struct <ref refid="struct_sil_kit___experimental___lin_controller_dynamic_config" kindref="compound">SilKit_Experimental_LinControllerDynamicConfig</ref></type>
        <definition>typedef struct SilKit_Experimental_LinControllerDynamicConfig SilKit_Experimental_LinControllerDynamicConfig</definition>
        <argsstring></argsstring>
        <name>SilKit_Experimental_LinControllerDynamicConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a57c9df4e473ee9f8629fbd04f2b68d9d" prot="public" static="no">
        <type>struct <ref refid="struct_sil_kit___experimental___lin_slave_configuration" kindref="compound">SilKit_Experimental_LinSlaveConfiguration</ref></type>
        <definition>typedef struct SilKit_Experimental_LinSlaveConfiguration SilKit_Experimental_LinSlaveConfiguration</definition>
        <argsstring></argsstring>
        <name>SilKit_Experimental_LinSlaveConfiguration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a6892dd83bdf98eb0faf2f75fd4962d0d" prot="public" static="no">
        <type>struct <ref refid="struct_sil_kit___experimental___lin_frame_header_event" kindref="compound">SilKit_Experimental_LinFrameHeaderEvent</ref></type>
        <definition>typedef struct SilKit_Experimental_LinFrameHeaderEvent SilKit_Experimental_LinFrameHeaderEvent</definition>
        <argsstring></argsstring>
        <name>SilKit_Experimental_LinFrameHeaderEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" prot="public" static="no">
        <type>struct <ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref></type>
        <definition>typedef struct SilKit_LinController SilKit_LinController</definition>
        <argsstring></argsstring>
        <name>SilKit_LinController</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The LIN controller can assume the role of a LIN master or a LIN slave. It provides two kinds of interfaces to perform data transfers and provide frame responses:</para><para>AUTOSAR-like LIN master interface:</para><para><itemizedlist>
<listitem><para><ref refid="_lin_8h_1a9116a4c3f428f5ef7aa287f17a7b1157" kindref="member">SilKit_LinController_SendFrame()</ref> transfers a frame from or to a LIN master. Requires <ref refid="_lin_8h_1ae95b9f8d16e642f9d7cfd1a4cd89f194" kindref="member">SilKit_LinControllerMode_Master</ref>.</para></listitem></itemizedlist>
</para><para>non-AUTOSAR interface:</para><para><itemizedlist>
<listitem><para><ref refid="_lin_8h_1ac1514b2f7d1aee2f5188b1d2726a7143" kindref="member">SilKit_LinController_SendFrameHeader()</ref> initiates the transmission of a LIN frame for a particular LIN identifier. For a successful transmission, exactly one LIN slave or master must have previously set a corresponding frame response for unconditional transmission. Requires <ref refid="_lin_8h_1ae95b9f8d16e642f9d7cfd1a4cd89f194" kindref="member">SilKit_LinControllerMode_Master</ref>. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a4504ff1b91644ba2d13910338395dd37" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void( * SilKit_LinFrameStatusHandler_t) (void *context, SilKit_LinController *controller, const SilKit_LinFrameStatusEvent *frameStatusEvent)</definition>
        <argsstring>)(void *context, SilKit_LinController *controller, const SilKit_LinFrameStatusEvent *frameStatusEvent)</argsstring>
        <name>SilKit_LinFrameStatusHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate the end of a LIN Frame transmission. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The context provided by the user on registration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller that received the acknowledge. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameStatusEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>The event containing a timestamp, the corresponding frame and the new status. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="313" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1af28cec69a7ff5b613c5f84e6d76009e0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void( * SilKit_LinGoToSleepHandler_t) (void *context, SilKit_LinController *controller, const SilKit_LinGoToSleepEvent *goToSleepEvent)</definition>
        <argsstring>)(void *context, SilKit_LinController *controller, const SilKit_LinGoToSleepEvent *goToSleepEvent)</argsstring>
        <name>SilKit_LinGoToSleepHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that a go-to-sleep frame has been received. Cf., <ref refid="_lin_8h_1af37414d2924d1387c3a8884684d0877e" kindref="member">SilKit_LinController_AddGoToSleepHandler()</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="319" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a7394157327b12636e80723a9bb41765c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void( * SilKit_LinWakeupHandler_t) (void *context, SilKit_LinController *controller, const SilKit_LinWakeupEvent *wakeUpEvent)</definition>
        <argsstring>)(void *context, SilKit_LinController *controller, const SilKit_LinWakeupEvent *wakeUpEvent)</argsstring>
        <name>SilKit_LinWakeupHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that a wakeup pulse has been received. Cf., <ref refid="_lin_8h_1ad34b6967773421251b88a486d054f76a" kindref="member">SilKit_LinController_AddWakeupHandler</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="325" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a215fd7d03c6efcf31a8098ca32775dcd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void( * SilKit_Experimental_LinSlaveConfigurationHandler_t) (void *context, SilKit_LinController *controller, const SilKit_Experimental_LinSlaveConfigurationEvent *slaveConfigurationEvent)</definition>
        <argsstring>)(void *context, SilKit_LinController *controller, const SilKit_Experimental_LinSlaveConfigurationEvent *slaveConfigurationEvent)</argsstring>
        <name>SilKit_Experimental_LinSlaveConfigurationHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that a LIN Slave configuration has been received. Cf., <ref refid="_lin_8h_1af45a1a89f1255d52f34ca17250e216bd" kindref="member">SilKit_Experimental_LinController_AddLinSlaveConfigurationHandler</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="331" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a46d98930f99291b2ea712f458f2cb889" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  SilKit_Experimental_LinFrameHeaderHandler_t) (void *context, SilKit_LinController *controller, const SilKit_Experimental_LinFrameHeaderEvent *frameHeaderEvent)</definition>
        <argsstring>)(void *context, SilKit_LinController *controller, const SilKit_Experimental_LinFrameHeaderEvent *frameHeaderEvent)</argsstring>
        <name>SilKit_Experimental_LinFrameHeaderHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate the reception of a LIN frame header. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The context provided by the user on registration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller that received the acknowledge. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameHeaderEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>The event containing information about the frame header. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="339" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a3ac14358448fe090e8aa10a0801ed5f4" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_Create_t) (SilKit_LinController **outLinController, SilKit_Participant *participant, const char *name, const char *network)</definition>
        <argsstring>)(SilKit_LinController **outLinController, SilKit_Participant *participant, const char *name, const char *network)</argsstring>
        <name>SilKit_LinController_Create_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="362" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a7ec6ce44ff4187067c184a0b852aa6d0" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_Init_t) (SilKit_LinController *controller, const SilKit_LinControllerConfig *config)</definition>
        <argsstring>)(SilKit_LinController *controller, const SilKit_LinControllerConfig *config)</argsstring>
        <name>SilKit_LinController_Init_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="386" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a770a7f2525621b9babf7afecbccb53f1" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_Experimental_LinController_InitDynamic_t) (SilKit_LinController *controller, const SilKit_Experimental_LinControllerDynamicConfig *config)</definition>
        <argsstring>)(SilKit_LinController *controller, const SilKit_Experimental_LinControllerDynamicConfig *config)</argsstring>
        <name>SilKit_Experimental_LinController_InitDynamic_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="402" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a8748d76db5279026d71138271834a3b8" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode(*  SilKit_LinController_SetFrameResponse_t) (SilKit_LinController *controller, const SilKit_LinFrameResponse *response)</definition>
        <argsstring>)(SilKit_LinController *controller, const SilKit_LinFrameResponse *response)</argsstring>
        <name>SilKit_LinController_SetFrameResponse_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="414" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a3e5c0f53760bc577d8b436ae7bf4fb36" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_Experimental_LinController_SendDynamicResponse_t) (SilKit_LinController *controller, const SilKit_LinFrame *frame)</definition>
        <argsstring>)(SilKit_LinController *controller, const SilKit_LinFrame *frame)</argsstring>
        <name>SilKit_Experimental_LinController_SendDynamicResponse_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="428" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1ab54460df47dcec63d2ff353e55200fc5" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_Status_t) (SilKit_LinController *controller, SilKit_LinControllerStatus *outStatus)</definition>
        <argsstring>)(SilKit_LinController *controller, SilKit_LinControllerStatus *outStatus)</argsstring>
        <name>SilKit_LinController_Status_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="439" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1adbcefcdf5ca214a84f2e2e8cc7027f98" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_SendFrame_t) (SilKit_LinController *controller, const SilKit_LinFrame *frame, SilKit_LinFrameResponseType responseType)</definition>
        <argsstring>)(SilKit_LinController *controller, const SilKit_LinFrame *frame, SilKit_LinFrameResponseType responseType)</argsstring>
        <name>SilKit_LinController_SendFrame_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="460" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1ac60fe3921899b813ee81c56922b59ec3" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_SendFrameHeader_t) (SilKit_LinController *controller, SilKit_LinId linId)</definition>
        <argsstring>)(SilKit_LinController *controller, SilKit_LinId linId)</argsstring>
        <name>SilKit_LinController_SendFrameHeader_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="473" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1adf18bf12aec76e8c6960cef79f9836e3" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_UpdateTxBuffer_t) (SilKit_LinController *controller, const SilKit_LinFrame *frame)</definition>
        <argsstring>)(SilKit_LinController *controller, const SilKit_LinFrame *frame)</argsstring>
        <name>SilKit_LinController_UpdateTxBuffer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="485" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a5d3287f86ba8525a42aae1f62a714bfe" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_GoToSleep_t) (SilKit_LinController *controller)</definition>
        <argsstring>)(SilKit_LinController *controller)</argsstring>
        <name>SilKit_LinController_GoToSleep_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="497" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1ab43581f9d69e73253fa2292ba8dd9ae3" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_GoToSleepInternal_t) (SilKit_LinController *controller)</definition>
        <argsstring>)(SilKit_LinController *controller)</argsstring>
        <name>SilKit_LinController_GoToSleepInternal_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="508" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a4c8b888904f1426a22e0b7006ccf9950" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_Wakeup_t) (SilKit_LinController *controller)</definition>
        <argsstring>)(SilKit_LinController *controller)</argsstring>
        <name>SilKit_LinController_Wakeup_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="519" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1afe26af47e2d4e118d99a13bd2dc5c437" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_WakeupInternal_t) (SilKit_LinController *controller)</definition>
        <argsstring>)(SilKit_LinController *controller)</argsstring>
        <name>SilKit_LinController_WakeupInternal_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="530" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1af6d2075ab2cd429f6154ddeedcae4677" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_Experimental_LinController_GetSlaveConfiguration_t) (SilKit_LinController *controller, SilKit_Experimental_LinSlaveConfiguration *outLinSlaveConfiguration)</definition>
        <argsstring>)(SilKit_LinController *controller, SilKit_Experimental_LinSlaveConfiguration *outLinSlaveConfiguration)</argsstring>
        <name>SilKit_Experimental_LinController_GetSlaveConfiguration_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="543" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a67697284535e813b1f7691bb2dcf1eb2" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_AddFrameStatusHandler_t) (SilKit_LinController *controller, void *context, SilKit_LinFrameStatusHandler_t handler, SilKit_HandlerId *outHandlerId)</definition>
        <argsstring>)(SilKit_LinController *controller, void *context, SilKit_LinFrameStatusHandler_t handler, SilKit_HandlerId *outHandlerId)</argsstring>
        <name>SilKit_LinController_AddFrameStatusHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="563" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a20bf2a089cd0c6af749d637980a2a52b" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_RemoveFrameStatusHandler_t) (SilKit_LinController *controller, SilKit_HandlerId handlerId)</definition>
        <argsstring>)(SilKit_LinController *controller, SilKit_HandlerId handlerId)</argsstring>
        <name>SilKit_LinController_RemoveFrameStatusHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="577" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a779991f0d90006ed0596fb3cf58c59c5" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_AddGoToSleepHandler_t) (SilKit_LinController *controller, void *context, SilKit_LinGoToSleepHandler_t handler, SilKit_HandlerId *outHandlerId)</definition>
        <argsstring>)(SilKit_LinController *controller, void *context, SilKit_LinGoToSleepHandler_t handler, SilKit_HandlerId *outHandlerId)</argsstring>
        <name>SilKit_LinController_AddGoToSleepHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="605" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a254c79c599fd889d690aaa4ba0961c56" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_RemoveGoToSleepHandler_t) (SilKit_LinController *controller, SilKit_HandlerId handlerId)</definition>
        <argsstring>)(SilKit_LinController *controller, SilKit_HandlerId handlerId)</argsstring>
        <name>SilKit_LinController_RemoveGoToSleepHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="619" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1ab2fc3c112d1c6c604cda48391adbd0e7" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_AddWakeupHandler_t) (SilKit_LinController *controller, void *context, SilKit_LinWakeupHandler_t handler, SilKit_HandlerId *outHandlerId)</definition>
        <argsstring>)(SilKit_LinController *controller, void *context, SilKit_LinWakeupHandler_t handler, SilKit_HandlerId *outHandlerId)</argsstring>
        <name>SilKit_LinController_AddWakeupHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="639" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a17d0769c9d30f3cd1d59b408b7d7a81b" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_LinController_RemoveWakeupHandler_t) (SilKit_LinController *controller, SilKit_HandlerId handlerId)</definition>
        <argsstring>)(SilKit_LinController *controller, SilKit_HandlerId handlerId)</argsstring>
        <name>SilKit_LinController_RemoveWakeupHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="651" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a8045540d009b4777f8407872e8439529" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_Experimental_LinController_AddLinSlaveConfigurationHandler_t) (SilKit_LinController *controller, void *context, SilKit_Experimental_LinSlaveConfigurationHandler_t handler, SilKit_HandlerId *outHandlerId)</definition>
        <argsstring>)(SilKit_LinController *controller, void *context, SilKit_Experimental_LinSlaveConfigurationHandler_t handler, SilKit_HandlerId *outHandlerId)</argsstring>
        <name>SilKit_Experimental_LinController_AddLinSlaveConfigurationHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="673" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a43baca834269c2bfd95cbecf52dce2c4" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_Experimental_LinController_RemoveLinSlaveConfigurationHandler_t) (SilKit_LinController *controller, SilKit_HandlerId handlerId)</definition>
        <argsstring>)(SilKit_LinController *controller, SilKit_HandlerId handlerId)</argsstring>
        <name>SilKit_Experimental_LinController_RemoveLinSlaveConfigurationHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="687" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a8f226da62c3c95b918aa49207987fc48" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_Experimental_LinController_AddFrameHeaderHandler_t) (SilKit_LinController *controller, void *context, SilKit_Experimental_LinFrameHeaderHandler_t handler, SilKit_HandlerId *outHandlerId)</definition>
        <argsstring>)(SilKit_LinController *controller, void *context, SilKit_Experimental_LinFrameHeaderHandler_t handler, SilKit_HandlerId *outHandlerId)</argsstring>
        <name>SilKit_Experimental_LinController_AddFrameHeaderHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="706" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_lin_8h_1a03a53d217fb02d6d0bb8231c3a35bb6b" prot="public" static="no">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(*</type>
        <definition>typedef SilKit_ReturnCode( * SilKit_Experimental_LinController_RemoveFrameHeaderHandler_t) (SilKit_LinController *controller, SilKit_HandlerId handlerId)</definition>
        <argsstring>)(SilKit_LinController *controller, SilKit_HandlerId handlerId)</argsstring>
        <name>SilKit_Experimental_LinController_RemoveFrameHeaderHandler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="713" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="713" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_lin_8h_1a886644663de4c344d2d19cf7c770d74b" prot="public" static="no" mutable="no">
        <type>const <ref refid="_lin_8h_1a731260f9964b5882339addc6f44ce8a6" kindref="member">SilKit_LinDataLength</ref></type>
        <definition>const SilKit_LinDataLength SilKit_LinDataLengthUnknown</definition>
        <argsstring></argsstring>
        <name>SilKit_LinDataLengthUnknown</name>
        <initializer>= 255u</initializer>
        <briefdescription>
<para>If configured with this value, the data length of the first reception will be used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="163" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_lin_8h_1a8b52ee561861df1e1f213b75177aa434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_Create</definition>
        <argsstring>(SilKit_LinController **outLinController, SilKit_Participant *participant, const char *name, const char *network)</argsstring>
        <name>SilKit_LinController_Create</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> **</type>
          <declname>outLinController</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1ad68cbbe03eb41e3b5683b5422e3cb9ae" kindref="member">SilKit_Participant</ref> *</type>
          <declname>participant</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>network</declname>
        </param>
        <briefdescription>
<para>Create a LIN controller at this SIL Kit simulation participant. </para>        </briefdescription>
        <detaileddescription>
<para>The lifetime of the resulting LIN controller is directly bound to the lifetime of the simulation participant. There is no further cleanup necessary except for destroying the simulation participant at the end of the simulation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outLinController</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer into which the resulting LIN controller will be written (out parameter). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>participant</parametername>
</parameternamelist>
<parameterdescription>
<para>The simulation participant at which the LIN controller should be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the new LIN controller. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>network</parametername>
</parameternamelist>
<parameterdescription>
<para>The network of the LIN controller to operate in.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a23f4ad8c054ffab15825277f24d2e264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_Init</definition>
        <argsstring>(SilKit_LinController *controller, const SilKit_LinControllerConfig *config)</argsstring>
        <name>SilKit_LinController_Init</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>const <ref refid="struct_sil_kit___lin_controller_config" kindref="compound">SilKit_LinControllerConfig</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize the LIN controller defining its role and RX/TX configuration. </para>        </briefdescription>
        <detaileddescription>
<para>All controllers must be initialized exactly once to take part in LIN communication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The controller configuration contains:<itemizedlist>
<listitem><para>controllerMode, either sets LIN master or LIN slave mode.</para></listitem><listitem><para>baudRate, determine transmission speeds (only used for detailed simulation).</para></listitem><listitem><para>frameResponses, a vector of LinFrameResponse. This must contain the final configuration on which LIN Ids the controller will receive (<ref refid="_lin_8h_1a2ddcf1b2f1320b120e78bacc734ed665" kindref="member">SilKit_LinFrameResponseMode_Rx</ref>) or respond to (<ref refid="_lin_8h_1a9bd4b540e9361769031c5137e576f62e" kindref="member">SilKit_LinFrameResponseMode_TxUnconditional</ref>) frames. An exception is the use of <ref refid="_lin_8h_1a9116a4c3f428f5ef7aa287f17a7b1157" kindref="member">SilKit_LinController_SendFrame</ref> for LinFrameResponseType::MasterResponse, which allows to extend the configuration during operation.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<emphasis>AUTOSAR Name:</emphasis> Lin_Init</para><para><simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a1a7ae10916efb08b02458660d80ea9e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_Experimental_LinController_InitDynamic</definition>
        <argsstring>(SilKit_LinController *controller, const SilKit_Experimental_LinControllerDynamicConfig *config)</argsstring>
        <name>SilKit_Experimental_LinController_InitDynamic</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>const <ref refid="struct_sil_kit___experimental___lin_controller_dynamic_config" kindref="compound">SilKit_Experimental_LinControllerDynamicConfig</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize the LIN controller in dynamic response mode. </para>        </briefdescription>
        <detaileddescription>
<para>All controllers must be initialized exactly once to take part in LIN communication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The controller configuration contains:<itemizedlist>
<listitem><para>controllerMode, either sets LIN master or LIN slave mode.</para></listitem><listitem><para>baudRate, determine transmission speeds (only used for detailed simulation).</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1aab4f0a6acf857008729c79497ac6fd9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_SetFrameResponse</definition>
        <argsstring>(SilKit_LinController *controller, const SilKit_LinFrameResponse *response)</argsstring>
        <name>SilKit_LinController_SetFrameResponse</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>const <ref refid="struct_sil_kit___lin_frame_response" kindref="compound">SilKit_LinFrameResponse</ref> *</type>
          <declname>response</declname>
        </param>
        <briefdescription>
<para>Set a RX/TX configuration during operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to set the configuration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>response</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame and response mode to be configured.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_sil_kit_1_1_state_error" kindref="compound">SilKit::StateError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the LIN Controller is not initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a68132d430a1d88bc8cf4b9081932447e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_Experimental_LinController_SendDynamicResponse</definition>
        <argsstring>(SilKit_LinController *controller, const SilKit_LinFrame *frame)</argsstring>
        <name>SilKit_Experimental_LinController_SendDynamicResponse</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>const <ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
<para>When in LinSimulationMode_Default, send a response for the previously received LIN header. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to set the configuration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame to send immediately.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_sil_kit_1_1_state_error" kindref="compound">SilKit::StateError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the LIN Controller is not initialized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="class_sil_kit_1_1_state_error" kindref="compound">SilKit::StateError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the LIN controller was not initialized into dynamic response mode using <ref refid="_lin_8h_1a1a7ae10916efb08b02458660d80ea9e0" kindref="member">SilKit_Experimental_LinController_InitDynamic()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a3063fc82459884655c855d771e77cbca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_Status</definition>
        <argsstring>(SilKit_LinController *controller, SilKit_LinControllerStatus *outStatus)</argsstring>
        <name>SilKit_LinController_Status</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type><ref refid="_lin_8h_1ae0010660601f6fbe2df6ed0683c740ee" kindref="member">SilKit_LinControllerStatus</ref> *</type>
          <declname>outStatus</declname>
        </param>
        <briefdescription>
<para>Get the current status of the LIN Controller, i.e., Operational or Sleep. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to retrieve the status </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer into which the status will be written (out parameter).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a9116a4c3f428f5ef7aa287f17a7b1157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_SendFrame</definition>
        <argsstring>(SilKit_LinController *controller, const SilKit_LinFrame *frame, SilKit_LinFrameResponseType responseType)</argsstring>
        <name>SilKit_LinController_SendFrame</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>const <ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="_lin_8h_1acf52690042a3ae9b5c5b2428cdc75c81" kindref="member">SilKit_LinFrameResponseType</ref></type>
          <declname>responseType</declname>
        </param>
        <briefdescription>
<para>Initiate a LIN data transfer of a given LinFrameResponseType (AUTOSAR LIN master interface) </para>        </briefdescription>
        <detaileddescription>
<para>The responseType determines if frame.data is used for the frame response or if a different node has to provide it:<itemizedlist>
<listitem><para>MasterResponse: LinFrame is sent from this controller to all connected slaves using frame.data. The LIN Master doesn&apos;t have to be configured with SilKit_LinFrameResponseMode_TxUnconditional on this LIN ID.</para></listitem><listitem><para>SlaveResponse: the frame response must be provided by a connected slave and is received by this controller.</para></listitem><listitem><para>SlaveToSlave: the frame response must be provided by a connected slave and is ignored by this controller.</para></listitem></itemizedlist>
</para><para><emphasis>AUTOSAR Name:</emphasis> Lin_SendFrame</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the LIN identifier, checksum model, and optional data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responseType</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines which LIN Node will provide the frame response.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1ac1514b2f7d1aee2f5188b1d2726a7143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_SendFrameHeader</definition>
        <argsstring>(SilKit_LinController *controller, SilKit_LinId linId)</argsstring>
        <name>SilKit_LinController_SendFrameHeader</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type><ref refid="_lin_8h_1a6af0cc9696323532582d1c980cc4fa58" kindref="member">SilKit_LinId</ref></type>
          <declname>linId</declname>
        </param>
        <briefdescription>
<para>Initiate a LIN data transfer by sending a LIN header (AUTOSAR LIN master interface) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linId</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the LIN header identifier. The node that is configured to respond on this ID will complete the transmission and provide the response data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_sil_kit_1_1_state_error" kindref="compound">SilKit::StateError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the LIN Controller is not initialized or not a master node. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1ad2becc00f3d9123a0b7efc37bf54e332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_UpdateTxBuffer</definition>
        <argsstring>(SilKit_LinController *controller, const SilKit_LinFrame *frame)</argsstring>
        <name>SilKit_LinController_UpdateTxBuffer</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>const <ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the response data. The LIN controller needs to be configured with TxUnconditional on this ID.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the LIN ID and data used for the update.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to operate on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a23e88f6af7f69227b891a0df98c107ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_GoToSleep</definition>
        <argsstring>(SilKit_LinController *controller)</argsstring>
        <name>SilKit_LinController_GoToSleep</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <briefdescription>
<para>Transmit a go-to-sleep-command and set SilKit_LinControllerStatus_Sleep and enable wake-up. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>AUTOSAR Name:</emphasis> Lin_GoToSleep</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to operate on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SilKit_ReturnCode_SUCCESS or SilKit_ReturnCode_WRONGSTATE if issued with wrong <ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1ae870526a748f0f080b6affb61fba20c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_GoToSleepInternal</definition>
        <argsstring>(SilKit_LinController *controller)</argsstring>
        <name>SilKit_LinController_GoToSleepInternal</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <briefdescription>
<para>Set SilKit_LinControllerStatus_Sleep without sending a go-to-sleep command. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>AUTOSAR Name:</emphasis> Lin_GoToSleepInternal</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to operate on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SilKit_ReturnCode_SUCCESS or SilKit_ReturnCode_WRONGSTATE if issued with wrong <ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1ae7eefe706eea60764389679bea37df30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_Wakeup</definition>
        <argsstring>(SilKit_LinController *controller)</argsstring>
        <name>SilKit_LinController_Wakeup</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <briefdescription>
<para>Generate a wake up pulse and set SilKit_LinControllerStatus_Operational. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>AUTOSAR Name:</emphasis> Lin_Wakeup</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to operate on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SilKit_ReturnCode_SUCCESS or SilKit_ReturnCode_WRONGSTATE if issued with wrong <ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="518" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a42e91711cc2638e2f5a251e8251868cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_WakeupInternal</definition>
        <argsstring>(SilKit_LinController *controller)</argsstring>
        <name>SilKit_LinController_WakeupInternal</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set SilKit_LinControllerStatus_Operational without generating a wake up pulse.</para><para><emphasis>AUTOSAR Name:</emphasis> Lin_WakeupInternal</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to operate on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SilKit_ReturnCode_SUCCESS or SilKit_ReturnCode_WRONGSTATE if issued with wrong <ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a3b41d24ab328028d2735ebffa6e7210f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_Experimental_LinController_GetSlaveConfiguration</definition>
        <argsstring>(SilKit_LinController *controller, SilKit_Experimental_LinSlaveConfiguration *outLinSlaveConfiguration)</argsstring>
        <name>SilKit_Experimental_LinController_GetSlaveConfiguration</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type><ref refid="struct_sil_kit___experimental___lin_slave_configuration" kindref="compound">SilKit_Experimental_LinSlaveConfiguration</ref> *</type>
          <declname>outLinSlaveConfiguration</declname>
        </param>
        <briefdescription>
<para>Get the aggregated configuration of all LIN slaves in the network. </para>        </briefdescription>
        <detaileddescription>
<para>Requires <ref refid="_lin_8h_1ae95b9f8d16e642f9d7cfd1a4cd89f194" kindref="member">SilKit_LinControllerMode_Master</ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outLinSlaveConfiguration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer into which the resulting LinSlaveConfiguration will be written (out parameter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller to operate on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SilKit_ReturnCode_SUCCESS or SilKit_ReturnCode_WRONGSTATE if issued with wrong <ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1af427231d9ca4b57d4986a729cdeb7c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_AddFrameStatusHandler</definition>
        <argsstring>(SilKit_LinController *controller, void *context, SilKit_LinFrameStatusHandler_t handler, SilKit_HandlerId *outHandlerId)</argsstring>
        <name>SilKit_LinController_AddFrameStatusHandler</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="_lin_8h_1a4504ff1b91644ba2d13910338395dd37" kindref="member">SilKit_LinFrameStatusHandler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref> *</type>
          <declname>outHandlerId</declname>
        </param>
        <briefdescription>
<para>Reports the SilKit_LinFrameStatus of a <ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref> and provides the transmitted frame. </para>        </briefdescription>
        <detaileddescription>
<para>The handler is used for reception and acknowledgement of LIN frames. The direction (prefixed with LIN_TX_ or LIN_RX_) and error state of the tranmission is encoded in the <ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller for which the callback should be registered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The user provided context pointer that is reobtained in the callback. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler to be called. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outHandlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler identifier that can be used to remove the callback.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a57a07a63d69059cc08c2d1acde9be251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_RemoveFrameStatusHandler</definition>
        <argsstring>(SilKit_LinController *controller, SilKit_HandlerId handlerId)</argsstring>
        <name>SilKit_LinController_RemoveFrameStatusHandler</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref></type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a <ref refid="_lin_8h_1a4504ff1b91644ba2d13910338395dd37" kindref="member">SilKit_LinFrameStatusHandler_t</ref> by SilKit_HandlerId on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller for which the callback should be removed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="574" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1af37414d2924d1387c3a8884684d0877e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_AddGoToSleepHandler</definition>
        <argsstring>(SilKit_LinController *controller, void *context, SilKit_LinGoToSleepHandler_t handler, SilKit_HandlerId *outHandlerId)</argsstring>
        <name>SilKit_LinController_AddGoToSleepHandler</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="_lin_8h_1af28cec69a7ff5b613c5f84e6d76009e0" kindref="member">SilKit_LinGoToSleepHandler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref> *</type>
          <declname>outHandlerId</declname>
        </param>
        <briefdescription>
<para>The GoToSleepHandler is called whenever a go-to-sleep frame was received. </para>        </briefdescription>
        <detaileddescription>
<para>Note: The LIN controller does not automatically enter sleep mode up reception of a go-to-sleep frame. I.e., <ref refid="_lin_8h_1ae870526a748f0f080b6affb61fba20c1" kindref="member">SilKit_LinController_GoToSleepInternal()</ref> must be called manually</para><para>Note: This handler will always be called, independently of the <ref refid="_lin_8h_1a04b93526f53b7ae7d16a2688e63a76b2" kindref="member">SilKit_LinFrameResponseMode</ref> configuration for LIN ID 0x3C. However, regarding the SilKit_LinFrameStatusHandler, the go-to-sleep frame is treated like every other frame, i.e. the SilKit_LinFrameStatusHandler is only called for LIN ID 0x3C if configured as SilKit_LinFrameResponseMode_Rx.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller for which the callback should be registered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The user provided context pointer that is reobtained in the callback. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler to be called. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outHandlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler identifier that can be used to remove the callback.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a543446be323993eabba7244351dd0abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_RemoveGoToSleepHandler</definition>
        <argsstring>(SilKit_LinController *controller, SilKit_HandlerId handlerId)</argsstring>
        <name>SilKit_LinController_RemoveGoToSleepHandler</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref></type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a <ref refid="_lin_8h_1af28cec69a7ff5b613c5f84e6d76009e0" kindref="member">SilKit_LinGoToSleepHandler_t</ref> by SilKit_HandlerId on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller for which the callback should be removed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="616" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1ad34b6967773421251b88a486d054f76a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_AddWakeupHandler</definition>
        <argsstring>(SilKit_LinController *controller, void *context, SilKit_LinWakeupHandler_t handler, SilKit_HandlerId *outHandlerId)</argsstring>
        <name>SilKit_LinController_AddWakeupHandler</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="_lin_8h_1a7394157327b12636e80723a9bb41765c" kindref="member">SilKit_LinWakeupHandler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref> *</type>
          <declname>outHandlerId</declname>
        </param>
        <briefdescription>
<para>The WakeupHandler is called whenever a wake up pulse is received. </para>        </briefdescription>
        <detaileddescription>
<para>Note: The LIN controller does not automatically enter operational mode on wake up pulse detection. I.e., WakeInternal() must be called manually.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller for which the callback should be registered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The user provided context pointer that is reobtained in the callback. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler to be called. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outHandlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler identifier that can be used to remove the callback.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a56ef1675d7f54acdd756803d489f5d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_LinController_RemoveWakeupHandler</definition>
        <argsstring>(SilKit_LinController *controller, SilKit_HandlerId handlerId)</argsstring>
        <name>SilKit_LinController_RemoveWakeupHandler</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref></type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a <ref refid="_lin_8h_1a7394157327b12636e80723a9bb41765c" kindref="member">SilKit_LinWakeupHandler_t</ref> by SilKit_HandlerId on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller for which the callback should be removed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="648" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1af45a1a89f1255d52f34ca17250e216bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_Experimental_LinController_AddLinSlaveConfigurationHandler</definition>
        <argsstring>(SilKit_LinController *controller, void *context, SilKit_Experimental_LinSlaveConfigurationHandler_t handler, SilKit_HandlerId *outHandlerId)</argsstring>
        <name>SilKit_Experimental_LinController_AddLinSlaveConfigurationHandler</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="_lin_8h_1a215fd7d03c6efcf31a8098ca32775dcd" kindref="member">SilKit_Experimental_LinSlaveConfigurationHandler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref> *</type>
          <declname>outHandlerId</declname>
        </param>
        <briefdescription>
<para>The LinSlaveConfigurationHandler is called whenever a remote LIN Slave is configured via SilKit_LinController_Init. </para>        </briefdescription>
        <detaileddescription>
<para>Note: This callback is mainly for diagnostic purposes and is NOT needed for regular LIN controller operation. It can be used to call <ref refid="_lin_8h_1a3b41d24ab328028d2735ebffa6e7210f" kindref="member">SilKit_Experimental_LinController_GetSlaveConfiguration</ref> to keep track of LIN Ids, where a response of a LIN Slave is to be expected.</para><para>Requires <ref refid="_lin_8h_1ae95b9f8d16e642f9d7cfd1a4cd89f194" kindref="member">SilKit_LinControllerMode_Master</ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller for which the callback should be registered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The user provided context pointer that is reobtained in the callback. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler to be called. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outHandlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler identifier that can be used to remove the callback.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a3e9f4790b33e4198514b1da1647a0851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_Experimental_LinController_RemoveLinSlaveConfigurationHandler</definition>
        <argsstring>(SilKit_LinController *controller, SilKit_HandlerId handlerId)</argsstring>
        <name>SilKit_Experimental_LinController_RemoveLinSlaveConfigurationHandler</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref></type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a <ref refid="_lin_8h_1a215fd7d03c6efcf31a8098ca32775dcd" kindref="member">SilKit_Experimental_LinSlaveConfigurationHandler_t</ref> by SilKit_HandlerId on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller for which the callback should be removed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="684" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a6a811e7eacdf18830538db8bf8d2d1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_Experimental_LinController_AddFrameHeaderHandler</definition>
        <argsstring>(SilKit_LinController *controller, void *context, SilKit_Experimental_LinFrameHeaderHandler_t handler, SilKit_HandlerId *outHandlerId)</argsstring>
        <name>SilKit_Experimental_LinController_AddFrameHeaderHandler</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="_lin_8h_1a46d98930f99291b2ea712f458f2cb889" kindref="member">SilKit_Experimental_LinFrameHeaderHandler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref> *</type>
          <declname>outHandlerId</declname>
        </param>
        <briefdescription>
<para>The LinFrameHeaderHandler is called whenever the master sends a LIN header. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controller</parametername>
</parameternamelist>
<parameterdescription>
<para>The LIN controller for which the callback should be registered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The user provided context pointer that is obtained in the callback. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler to be called. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outHandlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler identifier that can be used to remove the callback.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_sil_kit_1_1_state_error" kindref="compound">SilKit::StateError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the LIN controller was not initialized into dynamic response mode using <ref refid="_lin_8h_1a1a7ae10916efb08b02458660d80ea9e0" kindref="member">SilKit_Experimental_LinController_InitDynamic()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_lin_8h_1a3b5091ad9d838bdeb56ec90b762dc334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref></type>
        <definition>SilKit_ReturnCode SilKit_Experimental_LinController_RemoveFrameHeaderHandler</definition>
        <argsstring>(SilKit_LinController *controller, SilKit_HandlerId handlerId)</argsstring>
        <name>SilKit_Experimental_LinController_RemoveFrameHeaderHandler</name>
        <param>
          <type><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref> *</type>
          <declname>controller</declname>
        </param>
        <param>
          <type><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref></type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h" line="710" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2022<sp/>Vector<sp/>Informatik<sp/>GmbH</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="4"><highlight class="comment">a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="5"><highlight class="comment">&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="6"><highlight class="comment">without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="7"><highlight class="comment">distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment">permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment">the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="12"><highlight class="comment">included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment">NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE</highlight></codeline>
<codeline lineno="18"><highlight class="comment">LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION</highlight></codeline>
<codeline lineno="19"><highlight class="comment">OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="20"><highlight class="comment">WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_sil_kit_macros_8h" kindref="compound">silkit/capi/SilKitMacros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_types_8h" kindref="compound">silkit/capi/Types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_interface_identifiers_8h" kindref="compound">silkit/capi/InterfaceIdentifiers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>pack(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>pack(8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a4029ba13647be387d1d38057b99c7612" kindref="member">SILKIT_BEGIN_DECLS</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="_lin_8h_1ae0010660601f6fbe2df6ed0683c740ee" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_lin_8h_1ae0010660601f6fbe2df6ed0683c740ee" kindref="member">SilKit_LinControllerStatus</ref>;</highlight></codeline>
<codeline lineno="38" refid="_lin_8h_1aab007f1751ee688c640a2aa0523b26a7" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinControllerStatus_Unknown<sp/>((SilKit_LinControllerStatus)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="_lin_8h_1a54589e5817849f15be48ff8d232d53bb" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinControllerStatus_Operational<sp/>((SilKit_LinControllerStatus)1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="_lin_8h_1a53b2125ab719fa50c27579d54c1f4b99" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinControllerStatus_Sleep<sp/>((SilKit_LinControllerStatus)2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="_lin_8h_1aeefc35d08366db8bd385c3ffdb6c5577" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinControllerStatus_SleepPending<sp/>((SilKit_LinControllerStatus)3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref>;</highlight></codeline>
<codeline lineno="59" refid="_lin_8h_1a37c5edc49e792f038517fb890d26f54b" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinControllerMode_Inactive<sp/>((SilKit_LinControllerMode)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="_lin_8h_1ae95b9f8d16e642f9d7cfd1a4cd89f194" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinControllerMode_Master<sp/>((SilKit_LinControllerMode)1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="_lin_8h_1ae9abc6e16d23d82e574b418778bb47fd" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinControllerMode_Slave<sp/>((SilKit_LinControllerMode)2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="_lin_8h_1a87f84094445e3127075578c73f0083e9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_lin_8h_1a87f84094445e3127075578c73f0083e9" kindref="member">SilKit_LinBaudRate</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="_lin_8h_1a04b93526f53b7ae7d16a2688e63a76b2" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="_lin_8h_1a04b93526f53b7ae7d16a2688e63a76b2" kindref="member">SilKit_LinFrameResponseMode</ref>;</highlight></codeline>
<codeline lineno="75" refid="_lin_8h_1a48588e4bb8070bf9ef75c1debf5b46af" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameResponseMode_Unused<sp/>((SilKit_LinFrameResponseMode)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="_lin_8h_1a2ddcf1b2f1320b120e78bacc734ed665" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameResponseMode_Rx<sp/>((SilKit_LinFrameResponseMode)1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="_lin_8h_1a9bd4b540e9361769031c5137e576f62e" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameResponseMode_TxUnconditional<sp/>((SilKit_LinFrameResponseMode)2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="_lin_8h_1a6af0cc9696323532582d1c980cc4fa58" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="_lin_8h_1a6af0cc9696323532582d1c980cc4fa58" kindref="member">SilKit_LinId</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="_lin_8h_1ab62b46b7945a6daace65b4284946ff91" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="_lin_8h_1ab62b46b7945a6daace65b4284946ff91" kindref="member">SilKit_LinChecksumModel</ref>;</highlight></codeline>
<codeline lineno="95" refid="_lin_8h_1a8b3a5d8851d9d036a5a101b45eb57257" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SilKit_LinChecksumModel_Unknown<sp/>((SilKit_LinChecksumModel)0)<sp/></highlight></codeline>
<codeline lineno="96" refid="_lin_8h_1ae4e9a064ff445535254a5856352cd50c" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinChecksumModel_Enhanced<sp/>((SilKit_LinChecksumModel)1)<sp/></highlight></codeline>
<codeline lineno="97" refid="_lin_8h_1a8ff3f79ef412fc016300de88be2bb233" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinChecksumModel_Classic<sp/>((SilKit_LinChecksumModel)2)<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="_lin_8h_1acf52690042a3ae9b5c5b2428cdc75c81" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="_lin_8h_1acf52690042a3ae9b5c5b2428cdc75c81" kindref="member">SilKit_LinFrameResponseType</ref>;</highlight></codeline>
<codeline lineno="106" refid="_lin_8h_1a5e7e4692850d5fce01f1b3d65f353a24" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameResponseType_MasterResponse<sp/>((SilKit_LinFrameResponseType)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="_lin_8h_1a33c2d7443d8e32354ed397a772d9c33a" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameResponseType_SlaveResponse<sp/>((SilKit_LinFrameResponseType)1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="_lin_8h_1a6a06e45eb54d37fde63715be71aa2aa3" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameResponseType_SlaveToSlave<sp/>((SilKit_LinFrameResponseType)2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="_lin_8h_1a421c3abf319572f71c8e8f5aa7870dc7" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameStatus_NOT_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SilKit_LinFrameStatus)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="_lin_8h_1a5458ca9cc4f09f7e71d02ce7b6f6e751" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameStatus_LIN_TX_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SilKit_LinFrameStatus)1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="_lin_8h_1aee4303875285ed9ceb667988d858e91d" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameStatus_LIN_TX_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SilKit_LinFrameStatus)2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="_lin_8h_1a756edd4e06fa2f558b92b53315cf1308" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameStatus_LIN_TX_HEADER_ERROR<sp/>((SilKit_LinFrameStatus)3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="_lin_8h_1a62502ba5da46ccc6e48ecda2dd6d5426" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameStatus_LIN_TX_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SilKit_LinFrameStatus)4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="_lin_8h_1acdc5e8bc49b6bb3927dda95daee7100f" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameStatus_LIN_RX_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SilKit_LinFrameStatus)5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="_lin_8h_1a2db355f9cf18bc45f0b446e30bdfd1ff" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameStatus_LIN_RX_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SilKit_LinFrameStatus)6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="_lin_8h_1ae68afd10a3df0feff95fcb2408d07e5f" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameStatus_LIN_RX_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SilKit_LinFrameStatus)7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="_lin_8h_1ae482ee9a3d3f7743b5d5c9ab5f653e7c" refkind="member"><highlight class="preprocessor">#define<sp/>SilKit_LinFrameStatus_LIN_RX_NO_RESPONSE<sp/><sp/>((SilKit_LinFrameStatus)8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="_lin_8h_1a731260f9964b5882339addc6f44ce8a6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="_lin_8h_1a731260f9964b5882339addc6f44ce8a6" kindref="member">SilKit_LinDataLength</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="_lin_8h_1a886644663de4c344d2d19cf7c770d74b" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_lin_8h_1a731260f9964b5882339addc6f44ce8a6" kindref="member">SilKit_LinDataLength</ref><sp/><ref refid="_lin_8h_1a886644663de4c344d2d19cf7c770d74b" kindref="member">SilKit_LinDataLengthUnknown</ref><sp/>=<sp/>255u;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="struct_sil_kit___lin_frame" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref></highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173" refid="struct_sil_kit___lin_frame_1a2af33135cd8c44e26f5a6a8055f50291" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___struct_header" kindref="compound">SilKit_StructHeader</ref><sp/><ref refid="struct_sil_kit___lin_frame_1a2af33135cd8c44e26f5a6a8055f50291" kindref="member">structHeader</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174" refid="struct_sil_kit___lin_frame_1a6c46e1000da798a536e5bb6e946fc3d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a6af0cc9696323532582d1c980cc4fa58" kindref="member">SilKit_LinId</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___lin_frame_1a6c46e1000da798a536e5bb6e946fc3d7" kindref="member">id</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="175" refid="struct_sil_kit___lin_frame_1afa4130eafb97f9f99c1b1d50eb48ea2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1ab62b46b7945a6daace65b4284946ff91" kindref="member">SilKit_LinChecksumModel</ref><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___lin_frame_1afa4130eafb97f9f99c1b1d50eb48ea2f" kindref="member">checksumModel</ref>;<sp/></highlight></codeline>
<codeline lineno="176" refid="struct_sil_kit___lin_frame_1afa6d967dbffd90d722aeaf160647a442" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a731260f9964b5882339addc6f44ce8a6" kindref="member">SilKit_LinDataLength</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___lin_frame_1afa6d967dbffd90d722aeaf160647a442" kindref="member">dataLength</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177" refid="struct_sil_kit___lin_frame_1ab85a85269082b619f4ed4dc548a6c5b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___lin_frame_1ab85a85269082b619f4ed4dc548a6c5b4" kindref="member">data</ref>[8];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal">};</highlight></codeline>
<codeline lineno="179" refid="_lin_8h_1a2e179e29a077a066b7933e6c55f74efe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref><sp/><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="struct_sil_kit___lin_frame_status_event" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_frame_status_event" kindref="compound">SilKit_LinFrameStatusEvent</ref></highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184" refid="struct_sil_kit___lin_frame_status_event_1adf43e4890b29d57b8e5159cd8cfda63e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___struct_header" kindref="compound">SilKit_StructHeader</ref><sp/><ref refid="struct_sil_kit___lin_frame_status_event_1adf43e4890b29d57b8e5159cd8cfda63e" kindref="member">structHeader</ref>;<sp/></highlight></codeline>
<codeline lineno="185" refid="struct_sil_kit___lin_frame_status_event_1a0a6cc08328e88d2649da93b5941a49e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_orchestration_8h_1a4a5c030b6c22d0228bad174647d4b7fd" kindref="member">SilKit_NanosecondsTime</ref><sp/><ref refid="struct_sil_kit___lin_frame_status_event_1a0a6cc08328e88d2649da93b5941a49e7" kindref="member">timestamp</ref>;<sp/></highlight></codeline>
<codeline lineno="186" refid="struct_sil_kit___lin_frame_status_event_1a777106d2b06468df897d3263ca3e2522" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>*<sp/><ref refid="struct_sil_kit___lin_frame_status_event_1a777106d2b06468df897d3263ca3e2522" kindref="member">frame</ref>;</highlight></codeline>
<codeline lineno="187" refid="struct_sil_kit___lin_frame_status_event_1aabf63d08b853963bc02c1256723fb147" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1ad5976deba8b77971103d3e4cc1d8ee2c" kindref="member">SilKit_LinFrameStatus</ref><sp/><ref refid="struct_sil_kit___lin_frame_status_event_1aabf63d08b853963bc02c1256723fb147" kindref="member">status</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">};</highlight></codeline>
<codeline lineno="189" refid="_lin_8h_1a4d49bd8bbda1353a0ba9f532cdf788d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_frame_status_event" kindref="compound">SilKit_LinFrameStatusEvent</ref><sp/><ref refid="struct_sil_kit___lin_frame_status_event" kindref="compound">SilKit_LinFrameStatusEvent</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="struct_sil_kit___lin_wakeup_event" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_wakeup_event" kindref="compound">SilKit_LinWakeupEvent</ref></highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194" refid="struct_sil_kit___lin_wakeup_event_1a1d5269afaa6215373150a0dc99d44729" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___struct_header" kindref="compound">SilKit_StructHeader</ref><sp/><ref refid="struct_sil_kit___lin_wakeup_event_1a1d5269afaa6215373150a0dc99d44729" kindref="member">structHeader</ref>;<sp/></highlight></codeline>
<codeline lineno="195" refid="struct_sil_kit___lin_wakeup_event_1a7b47c239c21ac8ef1c20dcbd7d8d4571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_orchestration_8h_1a4a5c030b6c22d0228bad174647d4b7fd" kindref="member">SilKit_NanosecondsTime</ref><sp/><ref refid="struct_sil_kit___lin_wakeup_event_1a7b47c239c21ac8ef1c20dcbd7d8d4571" kindref="member">timestamp</ref>;<sp/></highlight></codeline>
<codeline lineno="196" refid="struct_sil_kit___lin_wakeup_event_1a88b33eff2f2eb590cd3f10827ecd5332" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_types_8h_1a3402fea0e77df42605c18bc2c4cfdd8c" kindref="member">SilKit_Direction</ref><sp/><ref refid="struct_sil_kit___lin_wakeup_event_1a88b33eff2f2eb590cd3f10827ecd5332" kindref="member">direction</ref>;<sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal">};</highlight></codeline>
<codeline lineno="198" refid="_lin_8h_1a2a31ebeb34a260c00a499e9ed3603abc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_wakeup_event" kindref="compound">SilKit_LinWakeupEvent</ref><sp/><ref refid="struct_sil_kit___lin_wakeup_event" kindref="compound">SilKit_LinWakeupEvent</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="struct_sil_kit___lin_go_to_sleep_event" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_go_to_sleep_event" kindref="compound">SilKit_LinGoToSleepEvent</ref></highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203" refid="struct_sil_kit___lin_go_to_sleep_event_1a6b6b7929e23b7944b262ef9b076040cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___struct_header" kindref="compound">SilKit_StructHeader</ref><sp/><ref refid="struct_sil_kit___lin_go_to_sleep_event_1a6b6b7929e23b7944b262ef9b076040cd" kindref="member">structHeader</ref>;<sp/></highlight></codeline>
<codeline lineno="204" refid="struct_sil_kit___lin_go_to_sleep_event_1a32739d75bc36271835f92cfbfda7fcd7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_orchestration_8h_1a4a5c030b6c22d0228bad174647d4b7fd" kindref="member">SilKit_NanosecondsTime</ref><sp/><ref refid="struct_sil_kit___lin_go_to_sleep_event_1a32739d75bc36271835f92cfbfda7fcd7" kindref="member">timestamp</ref>;<sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal">};</highlight></codeline>
<codeline lineno="206" refid="_lin_8h_1af8777524d78a2f9b36e6d5117a7dcc70" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_go_to_sleep_event" kindref="compound">SilKit_LinGoToSleepEvent</ref><sp/><ref refid="struct_sil_kit___lin_go_to_sleep_event" kindref="compound">SilKit_LinGoToSleepEvent</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="struct_sil_kit___experimental___lin_slave_configuration_event" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___experimental___lin_slave_configuration_event" kindref="compound">SilKit_Experimental_LinSlaveConfigurationEvent</ref></highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211" refid="struct_sil_kit___experimental___lin_slave_configuration_event_1ae4da0087ba560c5e68adddb4d329110f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___struct_header" kindref="compound">SilKit_StructHeader</ref><sp/><ref refid="struct_sil_kit___experimental___lin_slave_configuration_event_1ae4da0087ba560c5e68adddb4d329110f" kindref="member">structHeader</ref>;<sp/></highlight></codeline>
<codeline lineno="212" refid="struct_sil_kit___experimental___lin_slave_configuration_event_1a839aa253871385ba77d8593f511917b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_orchestration_8h_1a4a5c030b6c22d0228bad174647d4b7fd" kindref="member">SilKit_NanosecondsTime</ref><sp/><ref refid="struct_sil_kit___experimental___lin_slave_configuration_event_1a839aa253871385ba77d8593f511917b5" kindref="member">timestamp</ref>;<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal">};</highlight></codeline>
<codeline lineno="214" refid="_lin_8h_1aa0f694766ed7307111624c819c7292e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___experimental___lin_slave_configuration_event" kindref="compound">SilKit_Experimental_LinSlaveConfigurationEvent</ref><sp/><ref refid="struct_sil_kit___experimental___lin_slave_configuration_event" kindref="compound">SilKit_Experimental_LinSlaveConfigurationEvent</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="struct_sil_kit___lin_frame_response" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_frame_response" kindref="compound">SilKit_LinFrameResponse</ref></highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219" refid="struct_sil_kit___lin_frame_response_1aff7eafda739db0216b915a294913cfe3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___struct_header" kindref="compound">SilKit_StructHeader</ref><sp/><ref refid="struct_sil_kit___lin_frame_response_1aff7eafda739db0216b915a294913cfe3" kindref="member">structHeader</ref>;<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="struct_sil_kit___lin_frame_response_1aa0c386d6751569a54868e211dcfec8d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>*<sp/><ref refid="struct_sil_kit___lin_frame_response_1aa0c386d6751569a54868e211dcfec8d9" kindref="member">frame</ref>;</highlight></codeline>
<codeline lineno="229" refid="struct_sil_kit___lin_frame_response_1a54746d0a6efd177b47594ee4b36030d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a04b93526f53b7ae7d16a2688e63a76b2" kindref="member">SilKit_LinFrameResponseMode</ref><sp/><ref refid="struct_sil_kit___lin_frame_response_1a54746d0a6efd177b47594ee4b36030d6" kindref="member">responseMode</ref>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">};</highlight></codeline>
<codeline lineno="231" refid="_lin_8h_1ab9c8dd21d8b4ee00753e41c00ef4c0e9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_frame_response" kindref="compound">SilKit_LinFrameResponse</ref><sp/><ref refid="struct_sil_kit___lin_frame_response" kindref="compound">SilKit_LinFrameResponse</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="struct_sil_kit___lin_controller_config" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_controller_config" kindref="compound">SilKit_LinControllerConfig</ref></highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239" refid="struct_sil_kit___lin_controller_config_1a3823272970716cd961cee9ac1d335011" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___struct_header" kindref="compound">SilKit_StructHeader</ref><sp/><ref refid="struct_sil_kit___lin_controller_config_1a3823272970716cd961cee9ac1d335011" kindref="member">structHeader</ref>;</highlight></codeline>
<codeline lineno="241" refid="struct_sil_kit___lin_controller_config_1ab57d869303e2a0c61bdf0a95e22ecf02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref><sp/><ref refid="struct_sil_kit___lin_controller_config_1ab57d869303e2a0c61bdf0a95e22ecf02" kindref="member">controllerMode</ref>;</highlight></codeline>
<codeline lineno="243" refid="struct_sil_kit___lin_controller_config_1a7e43436f7c8787afdb775a5c69757f0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a87f84094445e3127075578c73f0083e9" kindref="member">SilKit_LinBaudRate</ref><sp/><ref refid="struct_sil_kit___lin_controller_config_1a7e43436f7c8787afdb775a5c69757f0a" kindref="member">baudRate</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="struct_sil_kit___lin_controller_config_1a39085f8bd50953cff218b629d9a7b2f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_controller_config_1a39085f8bd50953cff218b629d9a7b2f1" kindref="member">numFrameResponses</ref>;</highlight></codeline>
<codeline lineno="247" refid="struct_sil_kit___lin_controller_config_1a04beb9b9c26cc5d4b1360792ea5dadd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___lin_frame_response" kindref="compound">SilKit_LinFrameResponse</ref>*<sp/><sp/><ref refid="struct_sil_kit___lin_controller_config_1a04beb9b9c26cc5d4b1360792ea5dadd8" kindref="member">frameResponses</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">};</highlight></codeline>
<codeline lineno="249" refid="_lin_8h_1a308fd1599c5502f2eed6377a6f1c1bc7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___lin_controller_config" kindref="compound">SilKit_LinControllerConfig</ref><sp/><ref refid="struct_sil_kit___lin_controller_config" kindref="compound">SilKit_LinControllerConfig</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="struct_sil_kit___experimental___lin_controller_dynamic_config" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___experimental___lin_controller_dynamic_config" kindref="compound">SilKit_Experimental_LinControllerDynamicConfig</ref></highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257" refid="struct_sil_kit___experimental___lin_controller_dynamic_config_1a5732e04565b447eb3d74ccbc3464d9ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___struct_header" kindref="compound">SilKit_StructHeader</ref><sp/><ref refid="struct_sil_kit___experimental___lin_controller_dynamic_config_1a5732e04565b447eb3d74ccbc3464d9ce" kindref="member">structHeader</ref>;</highlight></codeline>
<codeline lineno="259" refid="struct_sil_kit___experimental___lin_controller_dynamic_config_1a768e5c5cf6e961161c5bb7b66e638f0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a1e3f7d7586e3c76c30383d672e9e5963" kindref="member">SilKit_LinControllerMode</ref><sp/><ref refid="struct_sil_kit___experimental___lin_controller_dynamic_config_1a768e5c5cf6e961161c5bb7b66e638f0e" kindref="member">controllerMode</ref>;</highlight></codeline>
<codeline lineno="261" refid="struct_sil_kit___experimental___lin_controller_dynamic_config_1adb489866a23e2aad155f1fa51fb71a87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a87f84094445e3127075578c73f0083e9" kindref="member">SilKit_LinBaudRate</ref><sp/><ref refid="struct_sil_kit___experimental___lin_controller_dynamic_config_1adb489866a23e2aad155f1fa51fb71a87" kindref="member">baudRate</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">};</highlight></codeline>
<codeline lineno="263" refid="_lin_8h_1a1b33a3a57c49faef8b3bad27879d708b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___experimental___lin_controller_dynamic_config" kindref="compound">SilKit_Experimental_LinControllerDynamicConfig</ref><sp/><ref refid="struct_sil_kit___experimental___lin_controller_dynamic_config" kindref="compound">SilKit_Experimental_LinControllerDynamicConfig</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="struct_sil_kit___experimental___lin_slave_configuration" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___experimental___lin_slave_configuration" kindref="compound">SilKit_Experimental_LinSlaveConfiguration</ref></highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272" refid="struct_sil_kit___experimental___lin_slave_configuration_1ad2ed0feca291a3481df42247de254103" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___struct_header" kindref="compound">SilKit_StructHeader</ref><sp/><ref refid="struct_sil_kit___experimental___lin_slave_configuration_1ad2ed0feca291a3481df42247de254103" kindref="member">structHeader</ref>;</highlight></codeline>
<codeline lineno="273" refid="struct_sil_kit___experimental___lin_slave_configuration_1a404b4dd52a6956285d838d3d8c511ee3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_types_8h_1acd67002df70237d213b7773b26891fcc" kindref="member">SilKit_Bool</ref><sp/>isLinIdResponding[64];</highlight></codeline>
<codeline lineno="274"><highlight class="normal">};</highlight></codeline>
<codeline lineno="275" refid="_lin_8h_1a57c9df4e473ee9f8629fbd04f2b68d9d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___experimental___lin_slave_configuration" kindref="compound">SilKit_Experimental_LinSlaveConfiguration</ref><sp/><ref refid="struct_sil_kit___experimental___lin_slave_configuration" kindref="compound">SilKit_Experimental_LinSlaveConfiguration</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="struct_sil_kit___experimental___lin_frame_header_event" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___experimental___lin_frame_header_event" kindref="compound">SilKit_Experimental_LinFrameHeaderEvent</ref></highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280" refid="struct_sil_kit___experimental___lin_frame_header_event_1ad1109d3f3e3810c225d7c7d8dfa44bd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___struct_header" kindref="compound">SilKit_StructHeader</ref><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___experimental___lin_frame_header_event_1ad1109d3f3e3810c225d7c7d8dfa44bd8" kindref="member">structHeader</ref>;<sp/></highlight></codeline>
<codeline lineno="281" refid="struct_sil_kit___experimental___lin_frame_header_event_1a40e3377d83ff1b4f37010d643ec0bb73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_orchestration_8h_1a4a5c030b6c22d0228bad174647d4b7fd" kindref="member">SilKit_NanosecondsTime</ref><sp/><ref refid="struct_sil_kit___experimental___lin_frame_header_event_1a40e3377d83ff1b4f37010d643ec0bb73" kindref="member">timestamp</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="282" refid="struct_sil_kit___experimental___lin_frame_header_event_1a3fbdcc16d7dd30f3e85a17419e402fc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a6af0cc9696323532582d1c980cc4fa58" kindref="member">SilKit_LinId</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sil_kit___experimental___lin_frame_header_event_1a3fbdcc16d7dd30f3e85a17419e402fc0" kindref="member">id</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal">};</highlight></codeline>
<codeline lineno="284" refid="_lin_8h_1a6892dd83bdf98eb0faf2f75fd4962d0d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sil_kit___experimental___lin_frame_header_event" kindref="compound">SilKit_Experimental_LinFrameHeaderEvent</ref><sp/><ref refid="struct_sil_kit___experimental___lin_frame_header_event" kindref="compound">SilKit_Experimental_LinFrameHeaderEvent</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="_lin_8h_1a4504ff1b91644ba2d13910338395dd37" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a4504ff1b91644ba2d13910338395dd37" kindref="member">SilKit_LinFrameStatusHandler_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,<sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_frame_status_event" kindref="compound">SilKit_LinFrameStatusEvent</ref>*<sp/>frameStatusEvent);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="_lin_8h_1af28cec69a7ff5b613c5f84e6d76009e0" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1af28cec69a7ff5b613c5f84e6d76009e0" kindref="member">SilKit_LinGoToSleepHandler_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,<sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_go_to_sleep_event" kindref="compound">SilKit_LinGoToSleepEvent</ref>*<sp/>goToSleepEvent);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="_lin_8h_1a7394157327b12636e80723a9bb41765c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a7394157327b12636e80723a9bb41765c" kindref="member">SilKit_LinWakeupHandler_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,<sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_wakeup_event" kindref="compound">SilKit_LinWakeupEvent</ref>*<sp/>wakeUpEvent);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="_lin_8h_1a215fd7d03c6efcf31a8098ca32775dcd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a215fd7d03c6efcf31a8098ca32775dcd" kindref="member">SilKit_Experimental_LinSlaveConfigurationHandler_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,<sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___experimental___lin_slave_configuration_event" kindref="compound">SilKit_Experimental_LinSlaveConfigurationEvent</ref>*<sp/>slaveConfigurationEvent);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="_lin_8h_1a46d98930f99291b2ea712f458f2cb889" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref>*<sp/><ref refid="_lin_8h_1a46d98930f99291b2ea712f458f2cb889" kindref="member">SilKit_Experimental_LinFrameHeaderHandler_t</ref>)(</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,<sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___experimental___lin_frame_header_event" kindref="compound">SilKit_Experimental_LinFrameHeaderEvent</ref>*<sp/>frameHeaderEvent);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a8b52ee561861df1e1f213b75177aa434" kindref="member">SilKit_LinController_Create</ref>(</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>**<sp/>outLinController,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="_types_8h_1ad68cbbe03eb41e3b5683b5422e3cb9ae" kindref="member">SilKit_Participant</ref><sp/>*participant,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>network);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="_lin_8h_1a3ac14358448fe090e8aa10a0801ed5f4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a3ac14358448fe090e8aa10a0801ed5f4" kindref="member">SilKit_LinController_Create_t</ref>)(</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>**<sp/>outLinController,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><ref refid="_types_8h_1ad68cbbe03eb41e3b5683b5422e3cb9ae" kindref="member">SilKit_Participant</ref>*<sp/>participant,<sp/></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>network);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a23f4ad8c054ffab15825277f24d2e264" kindref="member">SilKit_LinController_Init</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_controller_config" kindref="compound">SilKit_LinControllerConfig</ref>*<sp/>config);</highlight></codeline>
<codeline lineno="386" refid="_lin_8h_1a7ec6ce44ff4187067c184a0b852aa6d0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a7ec6ce44ff4187067c184a0b852aa6d0" kindref="member">SilKit_LinController_Init_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_controller_config" kindref="compound">SilKit_LinControllerConfig</ref>*<sp/>config);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a1a7ae10916efb08b02458660d80ea9e0" kindref="member">SilKit_Experimental_LinController_InitDynamic</ref>(</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___experimental___lin_controller_dynamic_config" kindref="compound">SilKit_Experimental_LinControllerDynamicConfig</ref>*<sp/>config);</highlight></codeline>
<codeline lineno="402" refid="_lin_8h_1a770a7f2525621b9babf7afecbccb53f1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a770a7f2525621b9babf7afecbccb53f1" kindref="member">SilKit_Experimental_LinController_InitDynamic_t</ref>)(</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___experimental___lin_controller_dynamic_config" kindref="compound">SilKit_Experimental_LinControllerDynamicConfig</ref>*<sp/>config);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1aab4f0a6acf857008729c79497ac6fd9f" kindref="member">SilKit_LinController_SetFrameResponse</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_frame_response" kindref="compound">SilKit_LinFrameResponse</ref>*<sp/>response);</highlight></codeline>
<codeline lineno="414" refid="_lin_8h_1a8748d76db5279026d71138271834a3b8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref>*<sp/><ref refid="_lin_8h_1a8748d76db5279026d71138271834a3b8" kindref="member">SilKit_LinController_SetFrameResponse_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_frame_response" kindref="compound">SilKit_LinFrameResponse</ref>*<sp/>response);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a68132d430a1d88bc8cf4b9081932447e" kindref="member">SilKit_Experimental_LinController_SendDynamicResponse</ref>(</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>*<sp/>frame);</highlight></codeline>
<codeline lineno="428" refid="_lin_8h_1a3e5c0f53760bc577d8b436ae7bf4fb36" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a3e5c0f53760bc577d8b436ae7bf4fb36" kindref="member">SilKit_Experimental_LinController_SendDynamicResponse_t</ref>)(</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>*<sp/>frame);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a3063fc82459884655c855d771e77cbca" kindref="member">SilKit_LinController_Status</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/><ref refid="_lin_8h_1ae0010660601f6fbe2df6ed0683c740ee" kindref="member">SilKit_LinControllerStatus</ref>*<sp/>outStatus);</highlight></codeline>
<codeline lineno="439" refid="_lin_8h_1ab54460df47dcec63d2ff353e55200fc5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1ab54460df47dcec63d2ff353e55200fc5" kindref="member">SilKit_LinController_Status_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/><ref refid="_lin_8h_1ae0010660601f6fbe2df6ed0683c740ee" kindref="member">SilKit_LinControllerStatus</ref>*<sp/>outStatus);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a9116a4c3f428f5ef7aa287f17a7b1157" kindref="member">SilKit_LinController_SendFrame</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>*<sp/>frame,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1acf52690042a3ae9b5c5b2428cdc75c81" kindref="member">SilKit_LinFrameResponseType</ref><sp/>responseType);</highlight></codeline>
<codeline lineno="460" refid="_lin_8h_1adbcefcdf5ca214a84f2e2e8cc7027f98" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1adbcefcdf5ca214a84f2e2e8cc7027f98" kindref="member">SilKit_LinController_SendFrame_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>*<sp/>frame,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1acf52690042a3ae9b5c5b2428cdc75c81" kindref="member">SilKit_LinFrameResponseType</ref><sp/>responseType);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1ac1514b2f7d1aee2f5188b1d2726a7143" kindref="member">SilKit_LinController_SendFrameHeader</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/><ref refid="_lin_8h_1a6af0cc9696323532582d1c980cc4fa58" kindref="member">SilKit_LinId</ref><sp/>linId);</highlight></codeline>
<codeline lineno="473" refid="_lin_8h_1ac60fe3921899b813ee81c56922b59ec3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1ac60fe3921899b813ee81c56922b59ec3" kindref="member">SilKit_LinController_SendFrameHeader_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/><ref refid="_lin_8h_1a6af0cc9696323532582d1c980cc4fa58" kindref="member">SilKit_LinId</ref><sp/>linId);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1ad2becc00f3d9123a0b7efc37bf54e332" kindref="member">SilKit_LinController_UpdateTxBuffer</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>*<sp/>frame);</highlight></codeline>
<codeline lineno="485" refid="_lin_8h_1adf18bf12aec76e8c6960cef79f9836e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1adf18bf12aec76e8c6960cef79f9836e3" kindref="member">SilKit_LinController_UpdateTxBuffer_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sil_kit___lin_frame" kindref="compound">SilKit_LinFrame</ref>*<sp/>frame);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a23e88f6af7f69227b891a0df98c107ea" kindref="member">SilKit_LinController_GoToSleep</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller);</highlight></codeline>
<codeline lineno="497" refid="_lin_8h_1a5d3287f86ba8525a42aae1f62a714bfe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a5d3287f86ba8525a42aae1f62a714bfe" kindref="member">SilKit_LinController_GoToSleep_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1ae870526a748f0f080b6affb61fba20c1" kindref="member">SilKit_LinController_GoToSleepInternal</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller);</highlight></codeline>
<codeline lineno="508" refid="_lin_8h_1ab43581f9d69e73253fa2292ba8dd9ae3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1ab43581f9d69e73253fa2292ba8dd9ae3" kindref="member">SilKit_LinController_GoToSleepInternal_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1ae7eefe706eea60764389679bea37df30" kindref="member">SilKit_LinController_Wakeup</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller);</highlight></codeline>
<codeline lineno="519" refid="_lin_8h_1a4c8b888904f1426a22e0b7006ccf9950" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a4c8b888904f1426a22e0b7006ccf9950" kindref="member">SilKit_LinController_Wakeup_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a42e91711cc2638e2f5a251e8251868cc" kindref="member">SilKit_LinController_WakeupInternal</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller);</highlight></codeline>
<codeline lineno="530" refid="_lin_8h_1afe26af47e2d4e118d99a13bd2dc5c437" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1afe26af47e2d4e118d99a13bd2dc5c437" kindref="member">SilKit_LinController_WakeupInternal_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a3b41d24ab328028d2735ebffa6e7210f" kindref="member">SilKit_Experimental_LinController_GetSlaveConfiguration</ref>(</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/><ref refid="struct_sil_kit___experimental___lin_slave_configuration" kindref="compound">SilKit_Experimental_LinSlaveConfiguration</ref>*<sp/>outLinSlaveConfiguration);</highlight></codeline>
<codeline lineno="543" refid="_lin_8h_1af6d2075ab2cd429f6154ddeedcae4677" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1af6d2075ab2cd429f6154ddeedcae4677" kindref="member">SilKit_Experimental_LinController_GetSlaveConfiguration_t</ref>)(</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/><ref refid="struct_sil_kit___experimental___lin_slave_configuration" kindref="compound">SilKit_Experimental_LinSlaveConfiguration</ref>*<sp/>outLinSlaveConfiguration);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1af427231d9ca4b57d4986a729cdeb7c8a" kindref="member">SilKit_LinController_AddFrameStatusHandler</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a4504ff1b91644ba2d13910338395dd37" kindref="member">SilKit_LinFrameStatusHandler_t</ref><sp/>handler,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref>*<sp/>outHandlerId);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="_lin_8h_1a67697284535e813b1f7691bb2dcf1eb2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a67697284535e813b1f7691bb2dcf1eb2" kindref="member">SilKit_LinController_AddFrameStatusHandler_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a4504ff1b91644ba2d13910338395dd37" kindref="member">SilKit_LinFrameStatusHandler_t</ref><sp/>handler,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref>*<sp/>outHandlerId);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a57a07a63d69059cc08c2d1acde9be251" kindref="member">SilKit_LinController_RemoveFrameStatusHandler</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref><sp/>handlerId);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="_lin_8h_1a20bf2a089cd0c6af749d637980a2a52b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a20bf2a089cd0c6af749d637980a2a52b" kindref="member">SilKit_LinController_RemoveFrameStatusHandler_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref><sp/>handlerId);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1af37414d2924d1387c3a8884684d0877e" kindref="member">SilKit_LinController_AddGoToSleepHandler</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1af28cec69a7ff5b613c5f84e6d76009e0" kindref="member">SilKit_LinGoToSleepHandler_t</ref><sp/>handler,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref>*<sp/>outHandlerId);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605" refid="_lin_8h_1a779991f0d90006ed0596fb3cf58c59c5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a779991f0d90006ed0596fb3cf58c59c5" kindref="member">SilKit_LinController_AddGoToSleepHandler_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1af28cec69a7ff5b613c5f84e6d76009e0" kindref="member">SilKit_LinGoToSleepHandler_t</ref><sp/>handler,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref>*<sp/>outHandlerId);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a543446be323993eabba7244351dd0abc" kindref="member">SilKit_LinController_RemoveGoToSleepHandler</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref><sp/>handlerId);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619" refid="_lin_8h_1a254c79c599fd889d690aaa4ba0961c56" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a254c79c599fd889d690aaa4ba0961c56" kindref="member">SilKit_LinController_RemoveGoToSleepHandler_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref><sp/>handlerId);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1ad34b6967773421251b88a486d054f76a" kindref="member">SilKit_LinController_AddWakeupHandler</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a7394157327b12636e80723a9bb41765c" kindref="member">SilKit_LinWakeupHandler_t</ref><sp/>handler,</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref>*<sp/>outHandlerId);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="_lin_8h_1ab2fc3c112d1c6c604cda48391adbd0e7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1ab2fc3c112d1c6c604cda48391adbd0e7" kindref="member">SilKit_LinController_AddWakeupHandler_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a7394157327b12636e80723a9bb41765c" kindref="member">SilKit_LinWakeupHandler_t</ref><sp/>handler,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref>*<sp/>outHandlerId);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a56ef1675d7f54acdd756803d489f5d98" kindref="member">SilKit_LinController_RemoveWakeupHandler</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref><sp/>handlerId);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="_lin_8h_1a17d0769c9d30f3cd1d59b408b7d7a81b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a17d0769c9d30f3cd1d59b408b7d7a81b" kindref="member">SilKit_LinController_RemoveWakeupHandler_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref><sp/>handlerId);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1af45a1a89f1255d52f34ca17250e216bd" kindref="member">SilKit_Experimental_LinController_AddLinSlaveConfigurationHandler</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a215fd7d03c6efcf31a8098ca32775dcd" kindref="member">SilKit_Experimental_LinSlaveConfigurationHandler_t</ref><sp/>handler,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref>*<sp/>outHandlerId);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673" refid="_lin_8h_1a8045540d009b4777f8407872e8439529" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a8045540d009b4777f8407872e8439529" kindref="member">SilKit_Experimental_LinController_AddLinSlaveConfigurationHandler_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a215fd7d03c6efcf31a8098ca32775dcd" kindref="member">SilKit_Experimental_LinSlaveConfigurationHandler_t</ref><sp/>handler,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref>*<sp/>outHandlerId);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a3e9f4790b33e4198514b1da1647a0851" kindref="member">SilKit_Experimental_LinController_RemoveLinSlaveConfigurationHandler</ref>(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref><sp/>handlerId);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687" refid="_lin_8h_1a43baca834269c2bfd95cbecf52dce2c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a43baca834269c2bfd95cbecf52dce2c4" kindref="member">SilKit_Experimental_LinController_RemoveLinSlaveConfigurationHandler_t</ref>)(<ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref><sp/>handlerId);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a6a811e7eacdf18830538db8bf8d2d1eb" kindref="member">SilKit_Experimental_LinController_AddFrameHeaderHandler</ref>(</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,<sp/><ref refid="_lin_8h_1a46d98930f99291b2ea712f458f2cb889" kindref="member">SilKit_Experimental_LinFrameHeaderHandler_t</ref><sp/>handler,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref>*<sp/>outHandlerId);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706" refid="_lin_8h_1a8f226da62c3c95b918aa49207987fc48" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a8f226da62c3c95b918aa49207987fc48" kindref="member">SilKit_Experimental_LinController_AddFrameHeaderHandler_t</ref>)(</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,<sp/><ref refid="_lin_8h_1a46d98930f99291b2ea712f458f2cb889" kindref="member">SilKit_Experimental_LinFrameHeaderHandler_t</ref><sp/>handler,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref>*<sp/>outHandlerId);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a6c783a5df2fdc1a6777798aa74bc18db" kindref="member">SilKitAPI</ref><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/><ref refid="_sil_kit_macros_8h_1a8e740e5d771d74a1b81bc77dc5f91bf7" kindref="member">SilKitCALL</ref><sp/><ref refid="_lin_8h_1a3b5091ad9d838bdeb56ec90b762dc334" kindref="member">SilKit_Experimental_LinController_RemoveFrameHeaderHandler</ref>(</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref><sp/>handlerId);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="_lin_8h_1a03a53d217fb02d6d0bb8231c3a35bb6b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_types_8h_1ae1af4b9fe1bfb867bcd4c2fa51d0d095" kindref="member">SilKit_ReturnCode</ref><sp/>(<ref refid="_sil_kit_macros_8h_1a92a6b92be098c8cd9b45677658c8174f" kindref="member">SilKitFPTR</ref><sp/>*<ref refid="_lin_8h_1a03a53d217fb02d6d0bb8231c3a35bb6b" kindref="member">SilKit_Experimental_LinController_RemoveFrameHeaderHandler_t</ref>)(</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_lin_8h_1a68b77ee573ac9eebc4ddd26784c1ff69" kindref="member">SilKit_LinController</ref>*<sp/>controller,<sp/><ref refid="_types_8h_1af09d37734982b9f2d7331a22744d9895" kindref="member">SilKit_HandlerId</ref><sp/>handlerId);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><ref refid="_sil_kit_macros_8h_1a04b5ec616ea8e67360a3930e4cf5d2fb" kindref="member">SILKIT_END_DECLS</ref></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>pack(pop)</highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/capi/Lin.h"/>
  </compounddef>
</doxygen>
