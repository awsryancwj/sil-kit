<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>SilKit::Services::Flexray::IFlexrayController</compoundname>
    <includes refid="_i_flexray_controller_8hpp" local="no">IFlexrayController.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a031911e78010a8c7567807acb3db2637" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller" kindref="compound">IFlexrayController</ref> *controller, const MsgT &amp;msg)&gt;</type>
        <definition>using SilKit::Services::Flexray::IFlexrayController::CallbackT =  std::function&lt;void(IFlexrayController* controller, const MsgT&amp; msg)&gt;</definition>
        <argsstring></argsstring>
        <name>CallbackT</name>
        <briefdescription>
<para>Generic FleyRay callback method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="42" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a0c7136d464ae1181fc837261f49154be" prot="public" static="no">
        <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a031911e78010a8c7567807acb3db2637" kindref="member">CallbackT</ref>&lt; <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_frame_event" kindref="compound">FlexrayFrameEvent</ref> &gt;</type>
        <definition>using SilKit::Services::Flexray::IFlexrayController::FrameHandler =  CallbackT&lt;FlexrayFrameEvent&gt;</definition>
        <argsstring></argsstring>
        <name>FrameHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that a FlexRay message has been received. Cf. <ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a21ef2ed2c3e8410da4c36fc57ff9a610" kindref="member">AddFrameHandler()</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="47" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a8b28b12fc8aac63ac292034e0a273a8d" prot="public" static="no">
        <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a031911e78010a8c7567807acb3db2637" kindref="member">CallbackT</ref>&lt; <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_frame_transmit_event" kindref="compound">FlexrayFrameTransmitEvent</ref> &gt;</type>
        <definition>using SilKit::Services::Flexray::IFlexrayController::FrameTransmitHandler =  CallbackT&lt;FlexrayFrameTransmitEvent&gt;</definition>
        <argsstring></argsstring>
        <name>FrameTransmitHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that a <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_frame_transmit_event" kindref="compound">FlexrayFrameTransmitEvent</ref> has been received. Cf. <ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1afa7e40f7b3768ecf9ceb6b2aea0f005a" kindref="member">AddFrameTransmitHandler()</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="52" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a4545e63e674cb8ba1bc1f725138d9b4b" prot="public" static="no">
        <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a031911e78010a8c7567807acb3db2637" kindref="member">CallbackT</ref>&lt; <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_wakeup_event" kindref="compound">FlexrayWakeupEvent</ref> &gt;</type>
        <definition>using SilKit::Services::Flexray::IFlexrayController::WakeupHandler =  CallbackT&lt;FlexrayWakeupEvent&gt;</definition>
        <argsstring></argsstring>
        <name>WakeupHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that a wakeup has been received. Should be answered by a call to <ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a1311d9bfd4d1262a325ed4f8a6179dab" kindref="member">Run()</ref>. Cf. <ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a70fa9a204d330619a35f751df4e849d3" kindref="member">AddWakeupHandler()</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="57" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1adb574753ac8ac8c16b5309850aa356fc" prot="public" static="no">
        <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a031911e78010a8c7567807acb3db2637" kindref="member">CallbackT</ref>&lt; <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_poc_status_event" kindref="compound">FlexrayPocStatusEvent</ref> &gt;</type>
        <definition>using SilKit::Services::Flexray::IFlexrayController::PocStatusHandler =  CallbackT&lt;FlexrayPocStatusEvent&gt;</definition>
        <argsstring></argsstring>
        <name>PocStatusHandler</name>
        <briefdescription>
<para>Callback type to indicate that the POC status (including state variables, modes and error codes) has changed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="60" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a76f14b6af889aabfb31b404dc2a2fce0" prot="public" static="no">
        <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a031911e78010a8c7567807acb3db2637" kindref="member">CallbackT</ref>&lt; <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_symbol_event" kindref="compound">FlexraySymbolEvent</ref> &gt;</type>
        <definition>using SilKit::Services::Flexray::IFlexrayController::SymbolHandler =  CallbackT&lt;FlexraySymbolEvent&gt;</definition>
        <argsstring></argsstring>
        <name>SymbolHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that the controller has received a symbol. Cf. <ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ac769ffd46cc5b9bc60d1963977980da1" kindref="member">AddSymbolHandler()</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="65" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a81b0ec44c049d1dd98bda7dd9d09dd8f" prot="public" static="no">
        <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a031911e78010a8c7567807acb3db2637" kindref="member">CallbackT</ref>&lt; <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_symbol_transmit_event" kindref="compound">FlexraySymbolTransmitEvent</ref> &gt;</type>
        <definition>using SilKit::Services::Flexray::IFlexrayController::SymbolTransmitHandler =  CallbackT&lt;FlexraySymbolTransmitEvent&gt;</definition>
        <argsstring></argsstring>
        <name>SymbolTransmitHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that the controller has sent a symbol. Cf. <ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1abc2e58093e740b3b0cf15acd98801869" kindref="member">AddSymbolTransmitHandler()</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="70" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1aa0827defec4f4fbb3889957b6af52fa3" prot="public" static="no">
        <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a031911e78010a8c7567807acb3db2637" kindref="member">CallbackT</ref>&lt; <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_cycle_start_event" kindref="compound">FlexrayCycleStartEvent</ref> &gt;</type>
        <definition>using SilKit::Services::Flexray::IFlexrayController::CycleStartHandler =  CallbackT&lt;FlexrayCycleStartEvent&gt;</definition>
        <argsstring></argsstring>
        <name>CycleStartHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback type to indicate that a new FlexRay cycle did start. Cf. <ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1afca2083c211bcd45167dec1ac25f56be" kindref="member">AddCycleStartHandler()</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="75" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a8bf881da74ce867aa4a5951be18510af" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual SilKit::Services::Flexray::IFlexrayController::~IFlexrayController</definition>
        <argsstring>()=default</argsstring>
        <name>~IFlexrayController</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a92ec50f1c0e17f92f469c54d497f255d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::Configure</definition>
        <argsstring>(const FlexrayControllerConfig &amp;config)=0</argsstring>
        <name>Configure</name>
        <param>
          <type>const <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_controller_config" kindref="compound">FlexrayControllerConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure the controller and switch to Ready state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ad7270a559de94a5e8c86ed6275b0f590" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::ReconfigureTxBuffer</definition>
        <argsstring>(uint16_t txBufferIdx, const FlexrayTxBufferConfig &amp;config)=0</argsstring>
        <name>ReconfigureTxBuffer</name>
        <param>
          <type>uint16_t</type>
          <declname>txBufferIdx</declname>
        </param>
        <param>
          <type>const <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_tx_buffer_config" kindref="compound">FlexrayTxBufferConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Reconfigure a TX Buffer that was previously setup with <ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a92ec50f1c0e17f92f469c54d497f255d" kindref="member">IFlexrayController::Configure(const FlexrayControllerConfig&amp;)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a9d2e6512d3d377de6eb649cef838417c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::UpdateTxBuffer</definition>
        <argsstring>(const FlexrayTxBufferUpdate &amp;update)=0</argsstring>
        <name>UpdateTxBuffer</name>
        <param>
          <type>const <ref refid="struct_sil_kit_1_1_services_1_1_flexray_1_1_flexray_tx_buffer_update" kindref="compound">FlexrayTxBufferUpdate</ref> &amp;</type>
          <declname>update</declname>
        </param>
        <briefdescription>
<para>Update the content of a previously configured TX buffer. </para>        </briefdescription>
        <detaileddescription>
<para>A FlexRay message will be sent at the time matching to the configured Slot ID. If the buffer was configured with <ref refid="namespace_sil_kit_1_1_services_1_1_flexray_1aec9ccca44578af9b0290b7b4d9f1ef67ac65ff9bc152122c76b6f5fbb742ed27e" kindref="member">FlexrayTransmissionMode::SingleShot</ref>, the content is sent exactly once. If it is configured as <ref refid="namespace_sil_kit_1_1_services_1_1_flexray_1aec9ccca44578af9b0290b7b4d9f1ef67a535863a82f163709557e59e2eb8139a7" kindref="member">FlexrayTransmissionMode::Continuous</ref>, the content is sent repeatedly according to the offset and repetition configuration.</para><para><simplesect kind="see"><para><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a92ec50f1c0e17f92f469c54d497f255d" kindref="member">IFlexrayController::Configure(const FlexrayControllerConfig&amp;)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a1311d9bfd4d1262a325ed4f8a6179dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::Run</definition>
        <argsstring>()=0</argsstring>
        <name>Run</name>
        <briefdescription>
<para>Send the FlexrayChiCommand::RUN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a37fce44d4a444f303c680619e46b116d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::DeferredHalt</definition>
        <argsstring>()=0</argsstring>
        <name>DeferredHalt</name>
        <briefdescription>
<para>Send the FlexrayChiCommand::DEFERRED_HALT. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a6fc2c0aef3266b4c79fe6abd12ac362a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::Freeze</definition>
        <argsstring>()=0</argsstring>
        <name>Freeze</name>
        <briefdescription>
<para>Send the FlexrayChiCommand::FREEZE. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ae0dbb51593878027179367bdb7c03ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::AllowColdstart</definition>
        <argsstring>()=0</argsstring>
        <name>AllowColdstart</name>
        <briefdescription>
<para>Send the FlexrayChiCommand::ALLOW_COLDSTART. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ace8114a4eb4102d8ce0b30c8cb5106df" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::AllSlots</definition>
        <argsstring>()=0</argsstring>
        <name>AllSlots</name>
        <briefdescription>
<para>Send the FlexrayChiCommand::ALL_SLOTS. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1aa29a5cc8fa8cd1f324423e28f9f1c47e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::Wakeup</definition>
        <argsstring>()=0</argsstring>
        <name>Wakeup</name>
        <briefdescription>
<para>Send the FlexrayChiCommand::WAKEUP. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a21ef2ed2c3e8410da4c36fc57ff9a610" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto SilKit::Services::Flexray::IFlexrayController::AddFrameHandler</definition>
        <argsstring>(FrameHandler handler) -&gt; HandlerId=0</argsstring>
        <name>AddFrameHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a0c7136d464ae1181fc837261f49154be" kindref="member">FrameHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Receive a FlexRay message from a different controller. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> that can be used to remove the callback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a74832b8ae7196e76060390b78de6481f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::RemoveFrameHandler</definition>
        <argsstring>(HandlerId handlerId)=0</argsstring>
        <name>RemoveFrameHandler</name>
        <param>
          <type>HandlerId</type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a FrameHandler by <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1afa7e40f7b3768ecf9ceb6b2aea0f005a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto SilKit::Services::Flexray::IFlexrayController::AddFrameTransmitHandler</definition>
        <argsstring>(FrameTransmitHandler handler) -&gt; HandlerId=0</argsstring>
        <name>AddFrameTransmitHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a8b28b12fc8aac63ac292034e0a273a8d" kindref="member">FrameTransmitHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Notification that a FlexRay message has been successfully sent. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> that can be used to remove the callback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ab5dc3409f6c2f73fddf8e7cae59d4d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::RemoveFrameTransmitHandler</definition>
        <argsstring>(HandlerId handlerId)=0</argsstring>
        <name>RemoveFrameTransmitHandler</name>
        <param>
          <type>HandlerId</type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a FrameTransmitHandler by <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a70fa9a204d330619a35f751df4e849d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto SilKit::Services::Flexray::IFlexrayController::AddWakeupHandler</definition>
        <argsstring>(WakeupHandler handler) -&gt; HandlerId=0</argsstring>
        <name>AddWakeupHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a4545e63e674cb8ba1bc1f725138d9b4b" kindref="member">WakeupHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Notification that a wakeup has been received. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> that can be used to remove the callback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ae91c973cffd48dc17d49d1671d0758d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::RemoveWakeupHandler</definition>
        <argsstring>(HandlerId handlerId)=0</argsstring>
        <name>RemoveWakeupHandler</name>
        <param>
          <type>HandlerId</type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a WakeupHandler by <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1af2e6e889787bc800a91f10a074256fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto SilKit::Services::Flexray::IFlexrayController::AddPocStatusHandler</definition>
        <argsstring>(PocStatusHandler handler) -&gt; HandlerId=0</argsstring>
        <name>AddPocStatusHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1adb574753ac8ac8c16b5309850aa356fc" kindref="member">PocStatusHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Notification that the POC status has changed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> that can be used to remove the callback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a3382592436f68749ae1315371a30322a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::RemovePocStatusHandler</definition>
        <argsstring>(HandlerId handlerId)=0</argsstring>
        <name>RemovePocStatusHandler</name>
        <param>
          <type>HandlerId</type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a PocStatusHandler by <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ac769ffd46cc5b9bc60d1963977980da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto SilKit::Services::Flexray::IFlexrayController::AddSymbolHandler</definition>
        <argsstring>(SymbolHandler handler) -&gt; HandlerId=0</argsstring>
        <name>AddSymbolHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a76f14b6af889aabfb31b404dc2a2fce0" kindref="member">SymbolHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Notification that the controller has received a symbol. </para>        </briefdescription>
        <detaileddescription>
<para>This callback is primarily intended for tracing. There is no need to react on it. The symbols relevant for interaction trigger also an additional callback, e.g., <ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a4545e63e674cb8ba1bc1f725138d9b4b" kindref="member">WakeupHandler</ref>.</para><para><simplesect kind="return"><para>Returns a <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> that can be used to remove the callback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a4c76071e2de092bc04feaad50c11d2fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::RemoveSymbolHandler</definition>
        <argsstring>(HandlerId handlerId)=0</argsstring>
        <name>RemoveSymbolHandler</name>
        <param>
          <type>HandlerId</type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a SymbolHandler by <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1abc2e58093e740b3b0cf15acd98801869" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto SilKit::Services::Flexray::IFlexrayController::AddSymbolTransmitHandler</definition>
        <argsstring>(SymbolTransmitHandler handler) -&gt; HandlerId=0</argsstring>
        <name>AddSymbolTransmitHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a81b0ec44c049d1dd98bda7dd9d09dd8f" kindref="member">SymbolTransmitHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Notification that the controller has sent a symbol. </para>        </briefdescription>
        <detaileddescription>
<para>This callback is primarily intended for tracing. There is no need to react on it. Currently, the following SymbolPatterns can occur:<itemizedlist>
<listitem><para><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1aa29a5cc8fa8cd1f324423e28f9f1c47e" kindref="member">Wakeup()</ref> will cause sending the <ref refid="namespace_sil_kit_1_1_services_1_1_flexray_1a0adde59b7a2e64533d4332980494e1afa9dbcbcead02b7110e39cfa53f091b5fb" kindref="member">FlexraySymbolPattern::Wus</ref>, if the bus is idle.</para></listitem><listitem><para><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a1311d9bfd4d1262a325ed4f8a6179dab" kindref="member">Run()</ref> will cause the transmission of <ref refid="namespace_sil_kit_1_1_services_1_1_flexray_1a0adde59b7a2e64533d4332980494e1afaa5cc832aef0982df4d2583cf608ecbb1" kindref="member">FlexraySymbolPattern::CasMts</ref> if configured to coldstart the bus.</para></listitem></itemizedlist>
</para><para><simplesect kind="return"><para>Returns a <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> that can be used to remove the callback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a851f7703ce58a4eb1c0003f695dc78da" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::RemoveSymbolTransmitHandler</definition>
        <argsstring>(HandlerId handlerId)=0</argsstring>
        <name>RemoveSymbolTransmitHandler</name>
        <param>
          <type>HandlerId</type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a SymbolTransmitHandler by <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1afca2083c211bcd45167dec1ac25f56be" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto SilKit::Services::Flexray::IFlexrayController::AddCycleStartHandler</definition>
        <argsstring>(CycleStartHandler handler) -&gt; HandlerId=0</argsstring>
        <name>AddCycleStartHandler</name>
        <param>
          <type><ref refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1aa0827defec4f4fbb3889957b6af52fa3" kindref="member">CycleStartHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Notification that a new FlexRay cycle did start. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> that can be used to remove the callback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1af30373588313a7eede5e722723e81a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SilKit::Services::Flexray::IFlexrayController::RemoveCycleStartHandler</definition>
        <argsstring>(HandlerId handlerId)=0</argsstring>
        <name>RemoveCycleStartHandler</name>
        <param>
          <type>HandlerId</type>
          <declname>handlerId</declname>
        </param>
        <briefdescription>
<para>Remove a CycleStartHandler by <ref refid="namespace_sil_kit_1_1_util_1a4a82dc5d09ddcbfdeca641d82eb510c1" kindref="member">SilKit::Util::HandlerId</ref> on this controller. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handlerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the callback to be removed. Obtained upon adding to respective handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="212" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract FlexRay Controller API to be used by vECUs. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" line="37" column="1" bodyfile="/home/ubuntu/sil-kit/SilKit/include/silkit/services/flexray/IFlexrayController.hpp" bodystart="36" bodyend="213"/>
    <listofallmembers>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1afca2083c211bcd45167dec1ac25f56be" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>AddCycleStartHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a21ef2ed2c3e8410da4c36fc57ff9a610" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>AddFrameHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1afa7e40f7b3768ecf9ceb6b2aea0f005a" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>AddFrameTransmitHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1af2e6e889787bc800a91f10a074256fd9" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>AddPocStatusHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ac769ffd46cc5b9bc60d1963977980da1" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>AddSymbolHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1abc2e58093e740b3b0cf15acd98801869" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>AddSymbolTransmitHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a70fa9a204d330619a35f751df4e849d3" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>AddWakeupHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ae0dbb51593878027179367bdb7c03ed9" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>AllowColdstart</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ace8114a4eb4102d8ce0b30c8cb5106df" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>AllSlots</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a031911e78010a8c7567807acb3db2637" prot="public" virt="non-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>CallbackT</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a92ec50f1c0e17f92f469c54d497f255d" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>Configure</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1aa0827defec4f4fbb3889957b6af52fa3" prot="public" virt="non-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>CycleStartHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a37fce44d4a444f303c680619e46b116d" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>DeferredHalt</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a0c7136d464ae1181fc837261f49154be" prot="public" virt="non-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>FrameHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a8b28b12fc8aac63ac292034e0a273a8d" prot="public" virt="non-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>FrameTransmitHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a6fc2c0aef3266b4c79fe6abd12ac362a" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>Freeze</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1adb574753ac8ac8c16b5309850aa356fc" prot="public" virt="non-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>PocStatusHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ad7270a559de94a5e8c86ed6275b0f590" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>ReconfigureTxBuffer</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1af30373588313a7eede5e722723e81a88" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>RemoveCycleStartHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a74832b8ae7196e76060390b78de6481f" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>RemoveFrameHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ab5dc3409f6c2f73fddf8e7cae59d4d13" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>RemoveFrameTransmitHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a3382592436f68749ae1315371a30322a" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>RemovePocStatusHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a4c76071e2de092bc04feaad50c11d2fd" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>RemoveSymbolHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a851f7703ce58a4eb1c0003f695dc78da" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>RemoveSymbolTransmitHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1ae91c973cffd48dc17d49d1671d0758d5" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>RemoveWakeupHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a1311d9bfd4d1262a325ed4f8a6179dab" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>Run</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a76f14b6af889aabfb31b404dc2a2fce0" prot="public" virt="non-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>SymbolHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a81b0ec44c049d1dd98bda7dd9d09dd8f" prot="public" virt="non-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>SymbolTransmitHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a9d2e6512d3d377de6eb649cef838417c" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>UpdateTxBuffer</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1aa29a5cc8fa8cd1f324423e28f9f1c47e" prot="public" virt="pure-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>Wakeup</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a4545e63e674cb8ba1bc1f725138d9b4b" prot="public" virt="non-virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>WakeupHandler</name></member>
      <member refid="class_sil_kit_1_1_services_1_1_flexray_1_1_i_flexray_controller_1a8bf881da74ce867aa4a5951be18510af" prot="public" virt="virtual"><scope>SilKit::Services::Flexray::IFlexrayController</scope><name>~IFlexrayController</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
